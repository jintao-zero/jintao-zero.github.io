<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tcp/ip | 金涛的博客]]></title>
  <link href="http://jintao-zero.github.io/blog/categories/tcp-ip/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2015-03-08T16:35:35+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tcp服务端并发之子进程]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/02/17/tcpfu-wu-duan-bing-fa-zhi-zi-jin-cheng/"/>
    <updated>2015-02-17T14:56:56+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/02/17/tcpfu-wu-duan-bing-fa-zhi-zi-jin-cheng</id>
    <content type="html"><![CDATA[<p>上一篇博客中实现的tcp服务端每次只能处理一个客户端连接，如果有多个客户端同时与服务端进行通讯的话，那只能进行等待上一个客户端通讯完成才可以，那么如何修改服务端为并发服务器程序呢？Unix中编写并发服务器程序最简单的方法就是fork一个子进程来服务每个客户。以下为一个典型的并发服务器的轮廓：</p>

<pre><code>pid_t pid;
int listenfd, connfd;
listenfd = Socket(...);
    /* fill in sockaddr_in{} with server's well-known port */
Bind*(listenfd, ...);
Listen(listenfd, LISTENQ);
for ( ; ; ) {
    connfd = Accept(listenfd, ...);  /* probably blocks */
    if ((pid = Fork()) == 0) {
        Close(listenfd);    /* child close listening socket */
        doit(connfd);       /* process the request */
        close(connfd);      /* child terminates */
        exit(0);            /* child terminate */
    }
    Close(connfd);          /* parent closes connected socket */
}
</code></pre>

<p>fork函数</p>

<pre><code>pid_t fork(void);
</code></pre>

<p>fork创建一个新进程。新进程是当前运行进程的一个拷贝。fork函数一次调用，两次返回。对于子进程返回值为0，对于父进程，返回值为子进程id。</p>

<p>以下为根据上面的并发服务器轮廓代码修改的tcp客户端代码：</p>

<!-- more -->


<pre><code>for (; ; ) {

    if ((connsock = accept(sock_server, (struct sockaddr *)&amp;clientaddr, &amp;clientaddr_len)) &lt; 0) {
        if (errno == EINTR) {
            continue;
        }
        else {
            printf("accept fail. reason:%s \n", strerror(errno));
            close(sock_server);
            exit(0);
        }
    }
    printf("new client connected, %s:%d \n", inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port);

    int child = fork();
    if (child == 0) { // child process

        close(sock_server);
        printf("child process:%d \n", getpid());
        // recv data from client
        char buf[1024];
        ssize_t rcv_len;
        while ((rcv_len = recv(connsock, buf, sizeof(buf), 0)) &gt; 0) {
            printf("recv from client:%s\n", buf);
            for (int i = 0; i &lt; rcv_len; i++)
                buf[i] = toupper(buf[i]);
            send(connsock, buf, rcv_len, 0);
            printf("send to  client:%s\n", buf);
        }
        printf("len:%ld \n", rcv_len);
        close(connsock);
        exit(0);
    }

    // parent process
    close(connsock);
}
</code></pre>

<p>以上tcp服务端程序可以并发处理多个客户端请求，但是在通讯结束，子进程调用exit函数退出后，会产生僵死进程, 使用ps命令可以看到多个server进程状态为Z+：<br/>
<img src="/images/zombie.png">
设置僵死状态的目的是维护子进程的信息，以便父进程在以后某个时候获取。这些信息包括子进程的进程ID、终止状态以及资源利用信息（CPU时间、内存使用量等等）。如果一个进程终止，而该进程有子进程处于僵死状态，那么它的所有僵死子进程的富进程ID将被重置为1（init进程）。继承这些子进程的init进程将清理它们。<br/>
僵死进程占用内核中的空间，最终可能导致我们耗尽进程资源，因此我们需要及时的清理僵死子进程，无论何时我们fork子进程都得wait它们，以防它们变成僵死进程。每个子进程在退出时，内核都会向父进程发送SIGCHLD信号，因此父进程需要建立一个俘获SIGCHLD信号的信号处理函数，在函数体中调用wait。</p>

<p>wait函数</p>

<pre><code>pid_t wait(int *stat_loc);
</code></pre>

<p>wait函数阻塞调用进程直到获取到一个退出子进程的信息，成功返回后，stat_loc返回退出子进程的退出信息。SIGCHILD信号处理函数为：</p>

<pre><code>void chld_sig_handler(int signo)
{
    int stat_loc;
    wait(&amp;stat_loc);
    return ;
}
</code></pre>

<p>sigaction函数</p>

<pre><code>struct  sigaction {
         union __sigaction_u __sigaction_u;  /* signal handler */
         sigset_t sa_mask;               /* signal mask to apply */
         int     sa_flags;               /* see signal options below */
 };

 union __sigaction_u {
         void    (*__sa_handler)(int);
         void    (*__sa_sigaction)(int, struct __siginfo *,
                        void *);
 };

#define sa_handler      __sigaction_u.__sa_handler
#define sa_sigaction    __sigaction_u.__sa_sigaction

int sigaction(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact);
</code></pre>

<p>sigaction函数用来修改进程对于某个信号的处理函数
参数sig为需要修改处理函数的信号id
参数act说明了该信号处理函数，以及进入处理函数时的信号掩码</p>

<pre><code>// register SIGCHLD process handler
struct sigaction act;
struct sigaction oact;
act.sa_handler = chld_sig_handler;
sigemptyset(&amp;act.sa_mask);
act.sa_flags = 0;
if (sigaction(SIGCHLD, &amp;act, &amp;oact) &lt; 0) {
    printf("set SIGCHLD handler fail. reason:%s \n", strerror(errno));
    close(sock_server);
    return -1;
}
</code></pre>

<p>在tcp服务代码中添加了SIGCHLD信号处理函数后，重新测试，但是发现仍然会出现僵死子进程：<br/>
<img src="/images/zombie_wait.png"><br/>
Unix信号处理机制中，<br/>
1、当一个信号达到后，进入该信号的处理函数后，进程将屏蔽该信号 <br/>
2、多个同样类型信号同时到达时，信号处理函数只执行一次，其他的信号不进行排队</p>

<p>这样当多个客户端连接同时结束时，会导致服务端子进程同时退出，多个SIGCHLD信号同时产生递送到服务端父进程，那么一种可能的情况是，在信号处理函数被调用之前，信号都到达，那么只有一个信号被处理，其他信号不会排队，将会被丢弃，这样仍然产生僵死子进程。<br/>
为了解决这样问题，可以在信号处理函数中多次执行wait操作，获取已经结束子进程的退出信息。但是上面的wait接口是阻塞等待、直到有新退出进程，这样的话就会影响进程的正常执行，下面介绍另外一个</p>

<pre><code>pid_t waitpid(pid_t pid, int *stat_loc, int options);
</code></pre>

<p>参数pid指定需要等待的进程集。pid为-1时，等待任何子进程。pid为0时，等待调用者进程组里面的任何子进程。pid大于0时，等待进程号为pid的子进程。
参数stat_loc用来保存进程退出状态。
参数options,为WNOHANG、WUNTRACED选项的或。指定WNOHANG操作时，如果尚没有退出的子进程，你们waitp函数不阻塞等待，会返回0。指定WUNTRACED选项时，如果子进程是由于SIGTTIN,SIGTTOU,SIGTSTP,SIGSTOP信号而处于stopped状态，那么wait操作也会获取到这些进程的状态信息。<br/>
需要修改SIGCHLD信号处理函数，使用waitp函数，设置options位WNOHANG来读取所有已经退出子进程的进程状态，防止变为僵尸进程。</p>

<pre><code>void chld_sig_handler(int signo)
{
    int stat_loc;
    int options = WNOHANG;
    int pid;
    while ((pid = waitpid(-1, &amp;stat_loc, options)) &gt; 0) {
        printf("wait pid:%d suc\n", pid);   // normally we should call i/o func in signal handler
    }
return ;
}
</code></pre>

<p>对于服务器主进程而言，大部分的时间都是阻塞在accept系统调用上，这一类的系统调用也称为慢系统调用（slow system call），适用与慢系统调用的一个规则是：当阻塞与某个慢系统调用的一个进程捕获某个信号且相应信号处理函数返回时，该系统调用可能返回一个EINTR错误。有些内核自动重启某些被中断的系统调用。为了便于移植，当我们编写捕获信号的程序时（多数并发服务器捕获SIGCHLD），我们必须对慢系统调用返回EINTR有所准备。修改服务器代码为：</p>

<pre><code>if ((connsock = accept(sock_server, (struct sockaddr *)&amp;clientaddr, &amp;clientaddr_len)) &lt; 0) {
    if (errno == EINTR) {
        continue;
    } else {
        printf("accept fail. reason:%s \n", strerror(errno));
        close(sock_server);
        exit(0);
    }
}
</code></pre>

<p>本片文章的目的时总结我们在网络编程时可能会遇到的三种情况：
(1) 当fork子进程时，必须捕获SIGCHLD信号
(2) 当捕获信号时，必须处理被中断的系统调用
(3) SIGCHLD的信号处理函数必须正确编写，应适用waitpid函数以免留下僵尸进程</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcp 服务端例子]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/02/13/tcp-fu-wu-duan-li-zi/"/>
    <updated>2015-02-13T11:04:43+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/02/13/tcp-fu-wu-duan-li-zi</id>
    <content type="html"><![CDATA[<p>实现了一个简单服务端，使用tcp与客户端进行通讯。本片文章主要介绍在tcp服务端网络编程中用到的几个基本函数：<br/>
1、创建套接字socket函数</p>

<pre><code>int socket(int domain, int type, int protocol)
</code></pre>

<p>socket函数创建一个通讯端并返回这个终端的文件描述符。</p>

<p>参数domain指定发生整个通讯过程所在的协议域。协议域定义在&lt;sys/socket.h>头文件中，常用协议域名为：</p>

<pre><code>PF_LOCAL 主机内部通讯协议，之前名为PF_UNIX
PF_UNIX  主机内部通讯协议，废弃，使用PF_LOCAL
PF_INET  IPV4通讯协议
PF_INET6 IPV6通讯协议
。。。
</code></pre>

<p>本例子中使用PF_INET ipv4通讯协议域</p>

<p>参数type指定socket类型，目前定义类型为：</p>

<pre><code>SOCK_STREAM                                      
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
</code></pre>

<p>SOCK_STREAM 类型提供序列化、可靠的、全双工字节流套接字
SOCK_DGRAM 类型提供无连接的、不可靠的，有报文最大限制的数据报通讯套接字
SOCK_RAW 类型提供读取内部网络协议和网卡接口的原始套接字，需要有超级用户权限<br/>
本例子中使用SOCK_STREAM流套接字类型</p>

<p>失败时，函数返回-1，成功时，返回套接字文件描述符</p>

<p>2、bind函数</p>

<pre><code>int bind(int socket, const struct sockaddr *address, socklen_t address_len);
</code></pre>

<p>bind函数把一个本地协议地址赋予一个套接字。
参数socket，为需要赋予地址的套接字。
参数address，为赋予到套接字的地址结构，有ip和端口号标识。
参数address_len, 为该地址结构大小</p>

<p>对于服务端来讲，在调用监听函数之前，都需要bind到特定地址和端口</p>

<!-- more -->


<p>3、listen函数</p>

<pre><code>int listen(int socket, int backlog);
</code></pre>

<p>listen函数仅由TCP服务器调用，它做两件事情：<br/>
(1) 当socket函数创建一个套接字时，它被假设为一个主动套接字，也就是说，它是一个将调用connect发起连接的客户套接字。   listen函数把一个未连接的套接字转换成一个被动套接字，指示内核应接受指向该套接字的连接请求。根据tcp状态转换图，调用listen导致套接字从CLOSED状态转换到LISTEN状态。<br/>
(2) 本函数的第二个参数规定了内核应该为相应套接字排队的最大连接个数。
本函数通常应该在调用socket和bind这两个函数之后，并在调用accept函数之前调用。
内核为任何一个给定的监听套接字维护两个队列：<br/>
(1)未完成连接队列，每个这样的SYN分节对应其中一项：已由某个客户发出并到达服务器，而服务器正在等待完成相应的TCP三路握手过程。这些套接字处于SYN_RCVD状态<br/>
(2)已完成连接队列，每个已完成TCP三路握手的客户对应其中一项。这些套接字处于ESTABLISHED状态。
参数backlog规定了以上两个队列的总和大小</p>

<p>4、accept函数</p>

<pre><code>int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
</code></pre>

<p>accept函数由TCP服务器调用，用于从已完成连接队列对头返回下一个已完成连接。如果已完成连接队列未空，那么进程被投入睡眠（假定套接字为默认的阻塞方式）。
参数address和address_len返回已连接的对端进程的协议地址。
如果accept成功，那么其返回值是由内核自动生产的一个全新描述符，代表与所返回客户的TCP连接。</p>

<p>5、下面是服务端源代码
此服务端小程序主要完成功能：1、监听服务端口，接收连接 2、接收客户端数据并处理后发回服务端</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;string.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;ctype.h&gt;

#define SERVER_PORT 8000

int main()
{
    // create socket
    int sock_server = socket(AF_INET, SOCK_STREAM, 0);
    if (-1 == sock_server) {
        printf("create socket fail.reason:%s\n",                strerror(errno));
        return -1;
    }

    // bind socket to local addr and port
    struct sockaddr_in servaddr;
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr  = INADDR_ANY;
    servaddr.sin_port = htons(SERVER_PORT);
    if (-1 == bind(sock_server, (struct sockaddr *)&amp;servaddr, (socklen_t)sizeof(servaddr))) {
        printf("bind to local addr fail.%s \n", strerror(errno));
        return -1;
    }
    printf("bind to local addr success\n");

    // make socket to listen
    if (-1 == listen(sock_server, 128)) {
        printf("listen fail.%s\n", strerror(errno));
        return -1;
    }

    struct sockaddr_in clientaddr;
    socklen_t clientaddr_len = sizeof(clientaddr);
    int connsock;

    // accept a new client connection
    while ((connsock = accept(sock_server, (struct sockaddr *)&amp;clientaddr, &amp;clientaddr_len)) != -1) {

        printf("new client connected, %s:%d \n", inet_ntoa(clientaddr.sin_addr),            clientaddr.sin_port);

        // recv data from client
        char buf[1024];
        ssize_t rcv_len;
        while ((rcv_len = recv(connsock, buf, sizeof(buf), 0)) &gt; 0) {
            printf("recv from client:%s\n", buf);
            for (int i = 0; i &lt; rcv_len; i++)
                buf[i] = toupper(buf[i]);
            send(connsock, buf, rcv_len, 0);
            printf("send to  client:%s\n", buf);
        }
        printf("len:%ld \n", rcv_len);
        close(connsock);
    }
    close(sock_server);
}   
</code></pre>

<p>运行效果：
<img src="/images/server.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcp 客户端示例]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/02/10/tcp-ke-hu-duan-shi-li/"/>
    <updated>2015-02-10T19:07:27+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/02/10/tcp-ke-hu-duan-shi-li</id>
    <content type="html"><![CDATA[<p>实现了一个简单客户端，使用tcp与服务端进行通讯。本片文章主要介绍在tcp客户端网络编程中用到的几个基本函数：<br/>
1、创建socket</p>

<pre><code>int socket(int domain, int type, int protocol)
</code></pre>

<p>socket函数创建一个通讯端并返回这个终端的文件描述符。</p>

<p>参数domain指定发生整个通讯过程所在的协议域。协议域定义在&lt;sys/socket.h>头文件中，常用协议域名为：</p>

<pre><code>PF_LOCAL 主机内部通讯协议，之前名为PF_UNIX
PF_UNIX  主机内部通讯协议，废弃，使用PF_LOCAL
PF_INET  IPV4通讯协议
PF_INET6 IPV6通讯协议
。。。
</code></pre>

<p>本例子中使用PF_INET ipv4通讯协议域</p>

<p>参数type指定socket类型，目前定义类型为：</p>

<pre><code>SOCK_STREAM                                      
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
</code></pre>

<p>SOCK_STREAM 类型提供序列化、可靠的、全双工字节流套接字
SOCK_DGRAM 类型提供无连接的、不可靠的，有报文最大限制的数据报通讯套接字
SOCK_RAW 类型提供读取内部网络协议和网卡接口的原始套接字，需要有超级用户权限<br/>
本例子中使用SOCK_STREAM流套接字类型</p>

<p>失败时，函数返回－1，成功时，返回套接字文件描述符</p>

<p>2、connect连接服务端</p>

<pre><code>int connect(int socket, const struct sockaddr *address, socklen_t address_len);
</code></pre>

<p>connect函数在一个socket上面初始化一个连接</p>

<p>参数socket为要建立连接的套接字<br/>
参数address为要对端连接的地址，不同协议域会有不同的方式解析这个参数内容
参数address_len为传入的address地址所对应地址结构体占据的内存大小</p>

<p>连接成功，函数返回0，失败，则返回－1，同时置错误码errno</p>

<!-- more -->


<p></p>

<p>3、send发送内容</p>

<pre><code>ssize_t send(int socket, const void *buffer, size_t length, int flags);
</code></pre>

<p>send函数发送数据到对端套接字。使用send函数时需要socket处于连接状态。</p>

<p>参数buffer为需要发送内容首地址<br/>
参数length为需要发送的报文内容长度<br/>
参数flags可能包含以下两种：</p>

<pre><code>    #define MSG_OOB        0x1  /* process out-of-band data */
    #define MSG_DONTROUTE  0x4  /* bypass routing, use direct interface */
</code></pre>

<p>本例中，不需要以上两种标志，设置为0即可</p>

<p>发送成功，函数返回发送的字节数，发送失败，返回－1，设置errno错误码</p>

<p>4、recv接受内容</p>

<pre><code>ssize_t recv(int socket, void *buffer, size_t length, int flags);
</code></pre>

<p>recv函数只可以在处于连接状态套接字使用。
默认情况下，如果没有数据可读，recv调用将会一直阻塞等待数据到达，除非socket被设置为非阻塞状态。通常情况下，recv会返回任何可读数据，最大达到请求的length数量，而不是一直等待接收到length数量才返回，可以通过设置套接字属性SO_RCVLOWAT和SO_RCVTIMEO来进行修改。
如果没有可接收数据并且对端已经执行关闭操作，那么recv返回0</p>

<p>参数flags，有以下几种类型：</p>

<pre><code>MSG_OOB        process out-of-band data
MSG_PEEK       peek at incoming message
MSG_WAITALL    wait for full request or error
</code></pre>

<p>MSG_OOB标志请求接收带外数据。<br/>
MSG_PEEK标志使recv只从头读取队列中的数据而不从队列中删除这些数据，这样接下来的读操作会读取相同内容。
MSG_WAITALL标志使recv操作阻塞直到读取的报文达到请求字节数。</p>

<p>recv函数返回接收到的字节数，返回－1表示发生错误，返回0表示对端已经关闭连接。</p>

<p>5、示例代码
示例完成功能：1、与服务端建立tcp连接 2、从控制台读取输入，发送到服务端 3、读取服务端返回数据 4、关闭tcp连接</p>

<pre><code>#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

#define SERVER_PORT 8000

int main(int argc, char *argv[])
{
    // judge the legal arguments
    if (2 &gt; argc) {
        printf("please input a hostname \n");
        return -1;
    }

    // create a SOC_STREAM socket
    int sock_client = socket(AF_INET, SOCK_STREAM, 0);
    if (0 &gt; sock_client) {
        perror("create socket error");
        return -1;
    }


    // construct server sockaddr
    struct hostent *p = gethostbyname(argv[1]);
    if (p == NULL) {
        printf("gethostbyname:%s fail.reason:%s \n", argv[1], strerror(errno));
        return -1;
    }
    struct sockaddr_in servaddr;
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr = *(struct in_addr *)p-&gt;h_addr;
    servaddr.sin_port = htons(SERVER_PORT);

    // connect to server
    if (connect(sock_client, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) == -1) {
        printf("connect to server:%s port:%d fail.reason:%s \n", inet_ntoa(servaddr.sin_addr), SERVER_PORT,
        strerror(errno));
        return -1;
    }
    printf("connect to server:%s port:%d success\n", inet_ntoa(servaddr.sin_addr), SERVER_PORT );

    // send and rev data with server
    char buf[1024];
    while(fgets(buf, sizeof(buf)-1, stdin))
    {
        int len = strlen(buf);
        if (len == 1)
            break;
        buf[len-1] = '\0';
        printf("%d\n", len-1);
        ssize_t send_size = send(sock_client, buf, len, 0);
        if (send_size != len) {
            printf("send fail \n");
            break;
        }
        ssize_t rcv_size = recv(sock_client, buf, sizeof(buf), 0);
        if (rcv_size == -1) {
            printf("rcv fail\n");
            break;
        }
        printf("recv from server:%s \n", buf);
    }
    close(sock_client);
}   
</code></pre>
]]></content>
  </entry>
  
</feed>
