<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ops | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/ops/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-11-15T16:53:45+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用logroate管理日志文件]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/11/11/shi-yong-logroateguan-li-ri-zhi-wen-jian/"/>
    <updated>2017-11-11T11:15:06+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/11/11/shi-yong-logroateguan-li-ri-zhi-wen-jian</id>
    <content type="html"><![CDATA[<p>logrotate命令设计用来管理日志文件。它可以自动循环，压缩，删除和邮件发送日志文件。可以根据不同的周期（日、周、月）和大小来管理文件。<br/>
通常情况下，logrotate作为cron天任务每天执行一次。如果logrotate一天之中被运行了多次，除非设置size作为日志循环处理条件或者使用<code>-f</code>或者<code>--force</code>参数，否则日志文件不会被多次处理。</p>

<h2>logrotate如何工作</h2>

<p>系统以通常是每天cron任务运行logrotate。CentOS系统中<code>logrotate</code>定时任务脚本位于<code>/etc/cron.daily</code>中。<br/>
如果以更高的频率运行logrotate任务，那么可以将<code>logrotate</code>放置在<code>/etc/cron.hourly</code>目录中。<br/>
logrotate运行时会读取/etc/logrotate.conf文件中的配置，根据文件中配置的信息对日志文件进行处理。<br/>
logrotate cron任务执行脚本如下：</p>

<pre><code>#!/bin/sh

/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit 0
</code></pre>

<!-- more -->


<h2>logrotate.conf</h2>

<p>logrotate主要的配置文件是<code>/etc/logrotate.conf</code>。<br/>
这个配置文件中包含了一些logrotate在执行日志处理时的默认配置。<br/>
在这个文件中包含了其他的配置文件：</p>

<pre><code># RPM packages drop log rotation information into this directory
include /etc/logrotate.d
</code></pre>

<p>我们可以将应用相关配置文件放置在<code>/etc/logrotate.d/</code>目录下</p>

<h2>logrotate.d</h2>

<p><code>ls /etc/logrotate.d/</code>可以查看系统中已经配置的应用相关配置文件：</p>

<pre><code>[root@test logrotate.d]# ls -al /etc/logrotate.d/
total 40
drwxr-xr-x.  2 root root  4096 Nov 11 09:57 .
drwxr-xr-x. 89 root root 12288 Nov 10 14:15 ..
-rw-r--r--   1 root root   243 Oct 31  2016 nginx
-rw-r--r--.  1 root root   136 Jun 10  2014 ppp
-rw-r--r--   1 root root   127 Aug  5  2016 redis
-rw-r--r--   1 root root   224 Nov  5  2016 syslog
-rw-r--r--   1 root root   100 Mar  3  2017 wpa_supplicant
-rw-r--r--   1 root root   100 Nov 15  2016 yum
[root@test logrotate.d]#
</code></pre>

<p>配置文件中配置了关于如何对应用产生的日志文件进行处理的配置信息：</p>

<pre><code>[root@test logrotate.d]# cat nginx
    /var/log/nginx/*log {
    create 0644 nginx nginx
    daily
    rotate 10
    missingok
    notifempty
    compress
    sharedscripts
    postrotate
        /bin/kill -USR1 `cat /run/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true
    endscript
}
</code></pre>

<p>下面会对配置文件中的配置命令进行详细说明。</p>

<h2>配置命令</h2>

<p>可以使用通过查看man手册获取logrotate命令的相信命令参数说明：</p>

<pre><code>man logrotate
</code></pre>

<p>/etc/logrotate.conf中配置了默认设置，应用配置文件会继承并覆盖/etc/logrotate.conf中的配置方法。</p>

<h3>Log files</h3>

<p>在上面nginx相关的配置信息中，开头的<code>/var/log/nginx/*log</code>即定义了需要处理的日志文件路径，大括号中的配置命令是对日志文件进行的具体配置。 <br/>
配置日志文件路径时，可以使用通配符。在一个文件中可以包含多个这样的配置信息。</p>

<h3>Rotate Count</h3>

<p><code>rotate</code>命令配置了旧日志文件保留个数。当保留的日志文件超过这个数目时，最老的日志文件将会被删除。</p>

<pre><code>rotate 10
</code></pre>

<p>这个命令高速logrotate保留10个日志文件。</p>

<h3>Rotation interval</h3>

<p>可以通过以下命令设置日志文件处理周期：</p>

<pre><code>daily
weekly
monthly
yearly
</code></pre>

<p>如果配置中没有指定时间周期，每次logrotate运行时都会日志文件进行处理，除非配置了size信息。<br/>
如果想以不同的周期运行logrotate工具，可以设置不同的cron任务。比如，每小时执行一次logrotate工具，可以在<code>/etc/cron.hourly</code>中放置执行脚本，包含以下执行命令：</p>

<pre><code>/usr/sbin/logrotate /etc/logrotate.hourly.conf
</code></pre>

<p>在<code>/etc/logrotate.hourly.conf</code>配置文件包含需要每小时进行处理的日志配置信息。</p>

<h3>Size</h3>

<p>可以使用<code>size</code>命令配置一个文件大小，logrotate工具根据这个文件大小来判断是否对日志文件进行处理。</p>

<pre><code>size 100k
size 100M
size 100G
</code></pre>

<p>第一个命令配置日志文件大于100k字节时处理文件，第二个命令配置日志文件大于100M字节时处理日志文件，第三个命令配置日志文件大于100G时处理日志文件。 通常情况不建议将size设置太大。</p>

<p>需要注意的是，<code>size</code>命令与<code>时间周期</code>配置是互斥的，根据试验表明，后面设置的数据行会覆盖前面, 当后面配置了<code>size</code>时，前面配置的<code>时间周期</code>将不起作用，反之亦然。</p>

<h3>Compression</h3>

<p>如果希望对产生的旧日志文件进行压缩处理，通常可以在<code>/etc/logrotate.conf</code>中配置<code>compress</code>，如果作为全局配置，那么所有产生的日志文件都会被压缩（以gzip格式）：</p>

<pre><code>compress
</code></pre>

<p>对于具体应用来说，如果不想对日志文件进行压缩处理，那么可以使用<code>nocompress</code>进行配置：</p>

<pre><code>nocompress
</code></pre>

<h3>Postrotate</h3>

<p>logrotate每次处理配置文件配置的日志文件后将会运行<code>postrotate</code>脚本。通常使用<code>postrotate</code>脚本在处理日志文件后重启应用，这样应用可以使用一个新日志文件。</p>

<pre><code>postrotate
    /usr/sbin/apachectl restart &gt; /dev/null
endscript
</code></pre>

<p><code>postrotate</code>命令表示脚本开始，<code>endscript</code>命令表示脚本结束。</p>

<h3>sharedscripts</h3>

<p><code>sharescripts</code>告诉logrotate只运行一次<code>postrotate</code>脚本。</p>

<p>下面的脚本示例：</p>

<pre><code>/data/l1/ss/test/trend/log.txt {
    rotate 5            # 保存5个旧日志文件
    copytruncate        # 拷贝并清除日志文件
    #size 20M
    maxsize 20M     # 日志文件最大大小为20M，达到20M时即被清理
    start 0         # 日志文件从0编号
    weekly              # 每周清理一次
    #dateext
    #dateyesterday
    createolddir       # 如果日志文件保存路径不存在，则创建
    olddir /data/l1/ss/test/trend/log      # 旧日志文件保存路径
}
</code></pre>

<h2>测试 logrotate</h2>

<p>如果怀疑日志文件没有被正确处理，或者添加了一个新配置，可以使用一些参数对logrotate进行调试。</p>

<h3>Verbose</h3>

<p><code>-v</code>参数，告诉logrotate输出详细信息。当logrotate没有按照设想处理日志时，使用<code>-v</code>参数进行调试。</p>

<h3>Ddbug</h3>

<p><code>-d</code>参数，告诉logrotate去检查日志文件，但是不实际执行处理动作。在测试新配置文件时，这个参数很有作用。<br/>
debug参数可以帮助检查配置文件格式是否正确和是否能够发现日志文件。</p>

<h3>Force</h3>

<p><code>-f</code>参数，强制logrotate工具处理所有日志文件，不管当时日志文件是否满足处理条件。</p>

<h3>Combining flags</h3>

<p>测试命令可以组合使用。让logrotate强制执行并且输出所有详细信息，但是不实际执行，可以使用如下命令：</p>

<pre><code>/usr/sbin/logrotate -vdf /etc/logrotate.conf
</code></pre>

<p>我们将会看到它会列出logrotate将会做什么，包括哪些日志文件将会处理和处理过程。</p>

<p>如果想测试所有的配置信息，可以强制执行：</p>

<pre><code>/usr/sbin/logrotate -vf /etc/logrotate.conf
</code></pre>

<p>日志将会强制处理，并打印详细信息。</p>

<h2>状态信息</h2>

<p>查看logrotate状态信息：</p>

<pre><code>cat /var/lib/logrotate.status
logrotate state -- version 2
"/var/log/acpid.log" 2010-6-18
"/var/log/iptables.log" 2010-6-18
"/var/log/uucp.log" 2010-6-29
..
</code></pre>

<h2>参考</h2>

<ul>
<li>man logrotate</li>
<li><a href="https://support.rackspace.com/how-to/understanding-logrotate-utility/">Understanding logrotate utility</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用strace调试进程]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/09/04/shi-yong-stracediao-shi-jin-cheng/"/>
    <updated>2017-09-04T18:44:00+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/09/04/shi-yong-stracediao-shi-jin-cheng</id>
    <content type="html"><![CDATA[<p><code>Strace</code>调试工具可以帮助定位问题。  <br/>
<code>Strace</code>工具可以用来记录指定程序运行过程中涉及的系统调用和信号。在没有获取程序源代码的情况下，strace工具可以有效帮助对程序的调试。strace工具提供一个二进制程序从开始到结束的执行顺序。  <br/>
下面几个例子展示如何使用<code>strace</code>工具：</p>

<!-- more -->


<ol>
<li><p>跟踪可执行程序的执行<br/>
可以使用strace工具跟踪任何可执行程序的执行。下面例子是使用strace跟踪linux ls命令的执行过程：</p>

<pre><code class="``">$  strace ls
execve("/bin/ls", ["ls"], [/* 21 vars */]) = 0
brk(0)                                  = 0x8c31000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78c7000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=65354, ...}) = 0
...
...
...
</code></pre></li>
<li><p>使用-e参数跟踪特定系统调用<br/>
strace默认跟踪执行程序的所有系统调用。可以使用<code>-e</code>参数跟踪特定系统调用：</p>

<pre><code class="``">$ strace -e open ls
open("/etc/ld.so.cache", O_RDONLY)      = 3
open("/lib/libselinux.so.1", O_RDONLY)  = 3
open("/lib/librt.so.1", O_RDONLY)       = 3
open("/lib/libacl.so.1", O_RDONLY)      = 3
open("/lib/libc.so.6", O_RDONLY)        = 3
open("/lib/libdl.so.2", O_RDONLY)       = 3
open("/lib/libpthread.so.0", O_RDONLY)  = 3
open("/lib/libattr.so.1", O_RDONLY)     = 3
open("/proc/filesystems", O_RDONLY|O_LARGEFILE) = 3
open("/usr/lib/locale/locale-archive", O_RDONLY|O_LARGEFILE) = 3
open(".", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
Desktop  Documents  Downloads  examples.desktop  libflashplayer.so 
Music  Pictures  Public  Templates  Ubuntu_OS  Videos
</code></pre>

<p>如果想执行多个系统调用，可以使用<code>-e trace=</code>选项。下面例子跟踪open和read系统调用：</p>

<pre><code class="``">  $ strace -e trace=open,read ls /home
open("/etc/ld.so.cache", O_RDONLY)      = 3
open("/lib/libselinux.so.1", O_RDONLY)  = 3
read(3, "\177ELF\1\1\1\3\3\1\260G004"..., 512) = 512
open("/lib/librt.so.1", O_RDONLY)       = 3
read(3, "\177ELF\1\1\1\3\3\1\300\30004"..., 512) = 512
..
open("/lib/libattr.so.1", O_RDONLY)     = 3
read(3, "\177ELF\1\1\1\3\3\1\360\r004"..., 512) = 512
open("/proc/filesystems", O_RDONLY|O_LARGEFILE) = 3
read(3, "nodev\tsysfs\nnodev\trootfs\nnodev\tb"..., 1024) = 315
read(3, "", 1024)                       = 0
open("/usr/lib/locale/locale-archive", O_RDONLY|O_LARGEFILE) = 3
open("/home", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
bala
</code></pre></li>
<li><p>保存调用过程到文件<br/>
下面例子使用<code>-o</code>参数保存调用过程到文件中：</p>

<pre><code class="``">  $ strace -o output.txt ls
  Desktop  Documents  Downloads  examples.desktop  libflashplayer.so
Music  output.txt  Pictures  Public  Templates  Ubuntu_OS  Videos

  $ cat output.txt 
execve("/bin/ls", ["ls"], [/* 37 vars */]) = 0
brk(0)                                  = 0x8637000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7860000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=67188, ...}) = 0
...
...
</code></pre></li>
<li><p>使用<code>-p</code>参数跟踪正在运行的进程<br/>
 先使用ps命令获取正在运行进程的id<br/>
 <code>
 $ ps -C firefox-bin
   PID TTY          TIME CMD
 1725 ?        00:40:50 firefox-bin
</code>
 使用<code>-p</code>指定strace需要跟踪进程的id</p>

<pre><code class="`"> $ sudo strace -p 1725 -o firefox_trace.txt

 $ tail -f firefox_trace.txt
</code></pre>

<p> 进程系统调用将会被写入到文件中，使用tail命令可以查看最近执行序列。</p></li>
<li><p>使用<code>-t</code>参数为每行输出显示时间戳</p>

<pre><code class="`"> $ strace -t -e open ls /home
20:42:37 open("/etc/ld.so.cache", O_RDONLY) = 3
20:42:37 open("/lib/libselinux.so.1", O_RDONLY) = 3
20:42:37 open("/lib/librt.so.1", O_RDONLY) = 3
20:42:37 open("/lib/libacl.so.1", O_RDONLY) = 3
20:42:37 open("/lib/libc.so.6", O_RDONLY) = 3
20:42:37 open("/lib/libdl.so.2", O_RDONLY) = 3
20:42:37 open("/lib/libpthread.so.0", O_RDONLY) = 3
20:42:37 open("/lib/libattr.so.1", O_RDONLY) = 3
20:42:37 open("/proc/filesystems", O_RDONLY|O_LARGEFILE) = 3
20:42:37 open("/usr/lib/locale/locale-archive", O_RDONLY|O_LARGEFILE) = 3
20:42:37 open("/home", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 3
bala
</code></pre></li>
<li><p>使用<code>-r</code>参数输出每个系统调用执行时间</p>

<pre><code class="`"> $ strace -r ls 
  0.000000 execve("/bin/ls", ["ls"], [/* 37 vars */]) = 0
  0.000846 brk(0)                    = 0x8418000
  0.000143 access("/etc/ld.so.nohwcap", F_OK) = -1 ENOENT (No such file or directory)
  0.000163 mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb787b000
  0.000119 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
  0.000123 open("/etc/ld.so.cache", O_RDONLY) = 3
  0.000099 fstat64(3, {st_mode=S_IFREG|0644, st_size=67188, ...}) = 0
  0.000155 mmap2(NULL, 67188, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb786a000
  ...
  ...
</code></pre></li>
<li><p>使用<code>-c</code>参数显示系统调用统计报告<br/>
 使用<code>-c</code>参数可以输出程序执行期间系统调用的统计数据：包括执行时间占比，执行时间，执行次数，错误数:</p>

<pre><code> $ strace -c ls /home
 bala
 % time     seconds  usecs/call     calls    errors syscall
 ------ ----------- ----------- --------- --------- ----------------
 -nan    0.000000           0         9           read
 -nan    0.000000           0         1           write
 -nan    0.000000           0        11           open


 -nan    0.000000           0        13           close
 -nan    0.000000           0         1           execve
 -nan    0.000000           0         9         9 access
 -nan    0.000000           0         3           brk
 -nan    0.000000           0         2           ioctl
 -nan    0.000000           0         3           munmap
 -nan    0.000000           0         1           uname
 -nan    0.000000           0        11           mprotect
 -nan    0.000000           0         2           rt_sigaction
 -nan    0.000000           0         1           rt_sigprocmask
 -nan    0.000000           0         1           getrlimit
 -nan    0.000000           0        25           mmap2
 -nan    0.000000           0         1           stat64
 -nan    0.000000           0        11           fstat64
 -nan    0.000000           0         2           getdents64
 -nan    0.000000           0         1           fcntl64
 -nan    0.000000           0         2         1 futex
 -nan    0.000000           0         1         set_thread_area
 -nan    0.000000           0         1           set_tid_address
 -nan    0.000000           0         1           statfs64
 -nan    0.000000           0         1              set_robust_list
 ------ ----------- ----------- --------- --------- ----------------
 100.00    0.000000                   114        10 total
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
