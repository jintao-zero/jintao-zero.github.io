<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tcp/ip | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/tcp-slash-ip/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-11-15T16:53:45+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设置TCP连接keepalive保活]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/11/15/she-zhi-tcplian-jie-keepalivebao-huo/"/>
    <updated>2017-11-15T15:46:35+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/11/15/she-zhi-tcplian-jie-keepalivebao-huo</id>
    <content type="html"><![CDATA[<p>一个tcp连接包含两端。如何确保连接两端的socket都在线呢，一个方法是应用程序定期发送一个心跳信息给对方，tcp/ip提供了一个系统层面的保活机制，设置了socket keepalive属性后，系统会定期给对端发送心跳报文，根据是否能收到回复来判断对端是否在线，当对端不在线时，对本段socket的读操作将会读到EOF。</p>

<h2>keepalive</h2>

<p>三个属性决定keepalive如何工作，在Linux系统中，这三个属性位于<code>proc</code>文件系统中：</p>

<ul>
<li><code>tcp_keepalive_time</code><br/>
连接空闲时间，超时后发送保活探测包，默认为<code>7200</code>秒</li>
<li><code>tcp_keepalive_intvl</code><br/>
每天探测包之间的间隔时间，默认为：<code>75</code>秒</li>
<li><code>tcp_keepalive_probes</code>
总的保护包数，超过则认为对端不在线，默认为<code>9</code>个</li>
</ul>


<p>keepalvie的工作过程如下：</p>

<ol>
<li>客户端建立到服务端的连接</li>
<li>当连接的空闲时间超过<code>tcp_keepalive_time</code>时，客户端向服务端发送一个tcp<code>ACK</code>包</li>
<li>服务端是否对刚刚的<code>ACK</code>包进行回复？

<ul>
<li>NO

<ol>
<li>. 等待<code>tcp_keepalive_intvl</code>超时，发送<code>ACK</code>包</li>
<li>. 如果探测包个数达到<code>tcp_keepalive_probes</code>，则发送一个<code>RST</code>报文并关闭连接</li>
</ol>
</li>
<li>YES<br/>
   收到心跳包回复，则继续步骤2</li>
</ul>
</li>
</ol>


<p>大多数系统中，默认是开启tcp连接保活的，当对端(7200+74*9)秒都没有回复的话，则会关闭本端连接。</p>

<!-- more -->


<h2>修改具体连接保活属性</h2>

<p>系统提供了默认值，在具体应用程序中，我们可以单独对连接设置不同的属性值：<br/>
C/C++代码示例如下：</p>

<pre><code>int keepalive_enabled = 1;
int keepalive_idle = 10; // 10 second
int keepalive_intvl = 5; // send keepalive every 5 second
int keepalive_cnt = 3; //
int ret = setsockopt(conn_sock, SOL_SOCKET, SO_KEEPALIVE, &amp;keepalive_enabled, sizeof(int));
ret = setsockopt(conn_sock, IPPROTO_TCP, TCP_KEEPIDLE, &amp;keepalive_idle, sizeof(int));
ret = setsockopt(conn_sock, IPPROTO_TCP, TCP_KEEPINTVL, &amp;keepalive_intvl, sizeof(int));     
ret = setsockopt(conn_sock, IPPROTO_TCP, TCP_KEEPCNT, &amp;keepalive_cnt, sizeof(int));
</code></pre>

<h2>修改系统全局保活属性</h2>

<ul>
<li><p>修改proc文件系统中的属性值</p>

<pre><code>  echo 10 &gt; /proc/sys/net/ipv4/tcp_keepalive_time
  echo 5  &gt; /proc/sys/net/ipv4/tcp_keepalive_intvl
  echo 3  &gt; /proc/sys/net/ipv4/tcp_keepalive_probes  
</code></pre>

<p>  这种方法修改的属性值，系统重启后属性值会恢复</p></li>
<li><p>sysctl命令修改</p>

<pre><code>  /sbin/sysctl -w net.ipv4.tcp_keepalive_time=10
  /sbin/sysctl -w net.ipv4.tcp_keepalive_intvl=5
  /sbin/sysctl -w net.ipv4.tcp_keepalive_probes=3
</code></pre>

<p>  这种方法，系统重启后属性值会恢复</p></li>
<li><p>修改/etc/sysctl.conf配置文件</p>

<pre><code>  net.ipv4.tcp_keepalive_time=10
  net.ipv4.tcp_keepalive_intvl=5
  net.ipv4.tcp_keepalive_probes=3   
</code></pre></li>
</ul>


<p> ##参考
* <a href="http://coryklein.com/tcp/2015/11/25/custom-configuration-of-tcp-socket-keep-alive-timeouts.html">Custom Configuration of TCP Socket Keep-Alive Timeouts</a><br/>
* <a href="http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html">TCP Keepalive HOWTO</a></p>
]]></content>
  </entry>
  
</feed>
