<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Golang | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/golang/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-03-30T19:39:56+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[golang 实现HTTP代理]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/03/29/golang-shi-xian-httpdai-li/"/>
    <updated>2017-03-29T16:51:16+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/03/29/golang-shi-xian-httpdai-li</id>
    <content type="html"><![CDATA[<p>使用Golang实现一个HTTP代理程序，程序部署在海外VPS节点，可以实现翻墙功能<br/>
HTTP Proxy的基本原理是将客户端HTTP请求发送到目标主机，将目标主机返回的HTTP应答转发到客户端,对于HTTPS协议略有不同，HTTPS协议需要Proxy先建立一条到目标主机的链路，之后再进行协议本身的通讯，下面简单介绍一个HTTP Proxy的实现过程：</p>

<h3>分析第一条请求</h3>

<ol>
<li><p>启动一个简版HTTP Proxy程序，代码如下：</p>

<pre><code> func handleConn(conn net.Conn) {
     defer conn.Close()
     log.Println("client conn form ", conn.RemoteAddr())
     var buffer [1024]byte
     _, err := conn.Read(buffer[:])
     if err != nil {
         return
     }
     log.Println(string(buffer[:]))
 }

 func main() {
     // listen on tcp port
     l, err := net.Listen("tcp", ":8081")
     if err != nil {
         log.Println(err)
         return
     }
     for {
         conn, err := l.Accept()
         if err != nil {
             log.Println(err)
             return
         }
         go handleConn(conn)
     }
 }  
 go run httpproxy.go
</code></pre>

<p> 这个程序主要是用来接收客户端发送的第一条HTTP请求</p></li>
</ol>


<!-- more -->


<ol>
<li><p>Safari设置HTTP/HTTPS代理<br/>
 设置代理为<code>localhost:8081</code><br/>
 <img src="/images/http-proxy-1.png" alt="proxy" /></p></li>
<li><p>Safari输入框访问<code>http://localhost:8080</code>，我们的proxy程序输出HTTP请求：</p>

<pre><code> GET http://www.localhost.com:8080/ HTTP/1.1
 Host: www.localhost.com:8080
 Proxy-Connection: keep-alive
 Upgrade-Insecure-Requests: 1
 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko)     Version/10.0.3 Safari/602.4.8
 Accept-Language: zh-cn
 Accept-Encoding: gzip, deflate
 Connection: keep-alive
</code></pre>

<p>其中跟代理有关的是前两行：</p>

<pre><code>  GET http://www.localhost.com:8080/ HTTP/1.1
  Host: www.localhost.com:8080
</code></pre>

<p>当访问<code>http://localhost</code>时，输出的前两行为：</p>

<pre><code>  GET http://www.localhost.com/ HTTP/1.1
  Host: www.localhost.com
</code></pre></li>
<li><p>Safari输入框访问<code>https://localhost:8080</code>时，proxy程序输出HTTP请求为：</p>

<pre><code> CONNECT www.localhost.com:8080 HTTP/1.1
 Host: www.localhost.com:8080
 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8
 Connection: keep-alive
 Proxy-Connection: keep-alive
</code></pre>

<p>访问网址为<code>https://localhost</code>时，输出为：</p>

<pre><code> CONNECT www.localhost.com:443 HTTP/1.1
 Host: www.localhost.com
 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8
 Connection: keep-alive
 Proxy-Connection: keep-alive
</code></pre></li>
</ol>


<p>设置代理后，客户端发送HTTP请求之前需要先与Proxy通讯建立到目标主机的通讯隧道，命令消息格式为：</p>

<pre><code>method absoluteURI HTTP/1.1
</code></pre>

<p>使用<code>HTTP</code>协议时，使用<code>GET</code>命令发送请求，使用<code>HTTPS</code>协议时，使用<code>CONNECT</code>命令发送请求,后面跟着<a href="http://greenbytes.de/tech/webdav/rfc2616.html#general.syntax">absoluteURI</a>,再就是HTTP版本信息
第二行为<code>Host</code>头标示了需要访问的目标地址，根据<a href="[Request-URI](http://greenbytes.de/tech/webdav/rfc2616.html#request-uri"><code>HTTP/1.1</code></a>)版本规定，客户端和服务的必须支持<code>Host</code>头，但是默认协议情况下，host头只包含域名，不包含默认端口号(<code>HTTP(80)``HTTPS(443)</code>)</p>

<p>我们的proxy程序需要根据<code>absoluteURI</code>获取目标域名和端口，从而建立到目标主机的连接，示例代码如下：</p>

<pre><code>var buffer [1024]byte
n, err := conn.Read(buffer[:])
if err != nil {
    return
}
log.Println(string(buffer[:]))
_, line, err := bufio.ScanLines(buffer[:], true)
if err != nil {
    log.Println(err)
    return
}
var method string
var absUri string
_, err = fmt.Sscanf(string(line), "%s%s", &amp;method, &amp;absUri)
if err != nil {
    log.Println(err)
    return
}
absUrl, err := url.Parse(absUri)
if err != nil {
    log.Println(err)
    return
}
log.Printf("%+v", *absUrl)
var hostPort string
if absUrl.Scheme == "http" {
    if strings.Index(absUrl.Host, ":") == -1 {
        hostPort = absUrl.Host + ":80"
    } else {
        hostPort = absUrl.Host
    }
} else {
    hostPort = absUrl.Scheme + ":" + absUrl.Opaque
}
log.Println("hostPort", hostPort)
</code></pre>

<h3>建立连接</h3>

<ol>
<li>根据获取的目标地址+端口建立到目标主机的tcp连接</li>
<li><p>根据第一条请求的协议类型(HTTP/HTTPS),做不同应答处理：<br/>
 2.1 HTTP消息，直接转发给目标主机，不对客户端有应答<br/>
 2.2 HTTPS CONNECT消息，对客户端应答<code>200</code>消息：</p>

<pre><code> HTTP/1.1 200 Connection established\r\n\r\n
</code></pre></li>
<li><p>不间断进行消息转发，某一方连接异常后，关闭双方连接</p>

<pre><code> go io.Copy(conn, serverConn)
 io.Copy(serverConn, conn)
</code></pre></li>
</ol>


<h3>部署</h3>

<ol>
<li><a href="https://github.com/jintao-zero/golang-http-proxy">完整代码</a></li>
<li>编译生成二进制可执行文件，部署到海外VPS服务器，浏览器设置对应ip和端口后，即可翻墙</li>
</ol>


<h3>遗留问题</h3>

<p>1、转发功能基本实现，但是依然无法访问google、facebook等被GFW墙的网站
    我猜想是明文HTTP请求中<code>google、facebook</code>类的网站名被匹配到，出口连接被关闭，使用了ssh tunnel功能，将数据加密传输解决了这个问题</p>

<h3>参考</h3>

<ol>
<li><a href="http://greenbytes.de/tech/webdav/rfc2616.html#changes.from.1.0">HTTP1.0 VS HTTP1.1</a></li>
<li><a href="http://stackoverflow.com/questions/7155529/how-does-http-proxy-work">how does http proxy work?</a></li>
<li><a href="https://en.wikipedia.org/wiki/Proxy_server#Web_proxy_servers">Proxy server</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Defer Panic 和Recover介绍和实践]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/03/07/golang-defer-panic-he-recoverjie-shao/"/>
    <updated>2017-03-07T11:08:41+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/03/07/golang-defer-panic-he-recoverjie-shao</id>
    <content type="html"><![CDATA[<p>Golang语言提供了正常的流程控制：if、for、switch和goto。还提供了go表达式创建goroutine协程。接下来将要介绍的是：<code>defer</code>、<code>panic</code>和<code>recovery</code></p>

<h2>defer</h2>

<p>defer表达式将一个函数放到一个list中。包裹defer函数的函数return时，这个defer函数将会被执行。<code>Defer</code>通常被用来简化资源清理动作。  <br/>
下面的代码片段，完成的功能是打开两个文件，将一个文件的内容拷贝到另外一个文件中：</p>

<pre><code>func CopyFile(dstName, srcName string) (written int64, err error) {
    src, err := os.Open(srcName)
    if err != nil {
        return
    }

    dst, err := os.Create(dstName)
    if err != nil {
        return
    }

    written, err = io.Copy(dst, src)
    dst.Close()
    src.Close()
    return
}
</code></pre>

<p>这个片段有bug。当调用os.Createa失败时，函数返回，但是没有将已经打开的源文件关闭。在第二个return语句之前执行src.Close可以修复bug。但是如果存在多个资源需要关闭或者多个return语句时，这样就比较繁琐。使用defer表达式，可以方便确保资源关闭：</p>

<pre><code>func CopyFile(dstName, srcName string) (written int64, err error) {
    src, err := os.Open(srcName)
    if err != nil {
        return
    }
    defer src.Close()

    dst, err := os.Create(dstName)
    if err != nil {
        return
    }
    defer dst.Close()

    return io.Copy(dst, src)
}
</code></pre>

<p>Defer表达式会提醒我们在打开文件之后关闭资源，并且确保无论多少return语句都会将资源关闭。<br/>
defer表达式的行为是简单和可预测的。下面有三条简单规则：</p>

<ol>
<li><p>注册defer函数时，计算deferred函数的参数
下面的例子中，defer表达式注册fmt.Println函数时确定了入参为0，下面函数执行return语句时，fmt.Println将会打印出0</p>

<pre><code>  func a() {
      i := 0
      defer fmt.Println(i)
      i++
      return
  }
</code></pre></li>
<li><p>注册函数按照先进后出的的顺序进行执行</p>

<pre><code> func b() {
     for i := 0; i &lt; 4; i++ {
         defer fmt.Print(i)
      }
 }
</code></pre>

<p> 打印结果是“3210”</p></li>
<li><p>Deferred函数可以读写包裹函数的命名返回值
下面的例子中，包裹函数返回后，deferred函数修改了命名返回值i。因此，包裹函数的返回值为2</p>

<pre><code>  func c() (i int) {
      defer func() { i++ }()
      return 1
  }
</code></pre>

<p>  这个特点可以用来修改函数返回的error返回值</p></li>
</ol>


<!-- more -->


<h2>Panic</h2>

<p><code>panic</code>是Golang内建函数，它会停止当前流程，开始<code>panicking</code>。当函数F调用panic时，F将会停止执行正常流程，执行F函数中注册的defer函数，然后F函数返回。对于F函数的调用函数，F函数表现为panic。F函数的调用函数按照F函数panic时的行为一样，执行deferred函数后返回，这样沿着沿着调用栈，直到最上层，之后程序崩溃。<code>Panic</code>可以由程序调用<code>panic</code>函数后触发，也会有运行时错误触发，比如slice越界访问。</p>

<h2>Recover</h2>

<p><code>recover</code>内建函数，可以用来从处于<code>panic</code>状态的goroutine中重新获取控制。<code>recover</code>只有在defer函数中才有用。在正常状态下，调用recover函数返回nil，不会有其他作用。如果当前goroutine处于<code>panicking</code>状态，那么调用<code>recover</code>函数，可以获取<code>panic</code>函数的参数，并终止<code>panicking</code>状态，进入正常状态。
下面的例子演示如何利用<code>defer</code>、<code>panic</code>和<code>recover</code>：</p>

<pre><code>package main

import "fmt"

func main() {
    f()
    fmt.Println("Returned normally from f.")
}

func f() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered in f", r)
        }
    }()
    fmt.Println("Calling g.")
    g(0)
    fmt.Println("Returned normally from g.")
}

func g(i int) {
    if i &gt; 3 {
    fmt.Println("Panicking!")
        panic(fmt.Sprintf("%v", i))
    }
    defer fmt.Println("Defer in g", i)
    fmt.Println("Printing in g", i)
    g(i + 1)
}
</code></pre>

<p>程序输出如下：</p>

<pre><code>Calling g.
Printing in g 0
Printing in g 1
Printing in g 2
Printing in g 3
Panicking!
Defer in g 3
Defer in g 2
Defer in g 1
Defer in g 0
Recovered in f 4
Returned normally from f.
</code></pre>

<p>如果我们删除F函数中的defer函数，那么panic将不会得到恢复，一直到到goroutine调用栈的最顶层，终止程序执行。这样程序的输出如下：</p>

<pre><code>Calling g.
Printing in g 0
Printing in g 1
Printing in g 2
Printing in g 3
Panicking!
Defer in g 3
Defer in g 2
Defer in g 1
Defer in g 0
panic: 4

panic PC=0x2a9cd8
[stack trace omitted]
</code></pre>

<h2>实践</h2>

<p>使用<code>defer</code>和<code>recover</code>构造一个带recover的goroutine包裹函数</p>

<pre><code>func defaultPanicHandler(e interface{}) {
    fmt.Println(e)
    debug.PrintStack()
    // log here
}

var PanicHandler func(interface{}) = defaultPanicHandler

func withRecover(fn func()) {
    defer func() {
        handler := PanicHandler
        if handler != nil {
            if err := recover(); err != nil {
                handler(err)
            }
        }
    }()
    fn()
}

func main () {
    go withRecover(
        func () {
            fmt.Println("aaaa")
            panic("panicking")
        }
    )
    for {
        time.Sleep(3 * time.Second)
    }
}
</code></pre>

<p>参考：</p>

<ol>
<li><a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Reflect介绍]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/03/06/golang-reflectjie-shao/"/>
    <updated>2017-03-06T17:44:02+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/03/06/golang-reflectjie-shao</id>
    <content type="html"><![CDATA[<p>Golang <a href="https://golang.org/pkg/reflect/">reflect</a>包实现了运行时反射，允许程序管理任意类型对象。典型应用是使用<code>TypeOf</code>从静态类型<code>interface{}</code>中抽取动态类型信息。<br/>
使用<code>ValueOf</code>返回一个<code>Value</code>类型变量代表运行时数据。<br/>
<a href="https://golang.org/doc/articles/laws_of_reflection.html">The Laws of Reflection</a>介绍了Golang reflect机智中的几条规则：</p>

<h2>从interface反射到对象</h2>

<p>反射基本功能是用来检查interface变量中保存的<code>类型</code>和<code>数据</code>对。<a href="http://golang.org/pkg/reflect/">package reflect</a>中提供了两种类型：<a href="http://golang.org/pkg/reflect/#Type">Type</a>和<a href="http://golang.org/pkg/reflect/#Value">Value</a>。这两种类型提供了反问interface内部数据的机制。调用<code>reflect.TypeOf</code>和<code>reflect.ValueOf</code>函数分别返回<code>reflect.Type</code>和<code>reflect.Value</code>变量：</p>

<pre><code>ackage main

import (
"fmt"
"reflect"
)

func main() {
    var x float64 = 3.4
    fmt.Println("type:", reflect.TypeOf(x))
}
</code></pre>

<p>程序输出如下：</p>

<pre><code>type: float64
</code></pre>

<p><code>reflect.TypeOf</code>函数定义如下：</p>

<pre><code>// TypeOf returns the reflection Type of the value in the interface{}.
func TypeOf(i interface{}) Type
</code></pre>

<p>当我们调用<code>TypeOf(x)</code>时，x首先存在一个空interface中，之后作为参数，reflect.TypeOf解析参数获取实际类型。  <br/>
调用<code>Value(x)</code>时，从接口参数中获取实参值。</p>

<pre><code>var x float64 = 3.4
fmt.Println("value:", reflect.ValueOf(x))
</code></pre>

<p>打印结果如下：</p>

<pre><code>value: &lt;float64 Value&gt;
</code></pre>

<!-- more -->


<p></p>

<h2>从反射对象逆转回接口值</h2>

<p>给定一个<code>reflect.Value</code>对象，调用<code>Interface</code>方法可以恢复一个接口值。实际上，<code>Interface</code>方法将Value对象的值和类型信息打包到一个接口值中并返回：</p>

<pre><code>// Interface returns v's value as an interface{}.
func (v Value) Interface() interface{}
</code></pre>

<p>接上面的例子：</p>

<pre><code>y := v.Interface().(float64) // y will have type float64.
fmt.Println(y)
</code></pre>

<p>将反射对象v代表的float64值打印。</p>

<h2>如果修改一个反射对象，value必须可设置</h2>

<p><code>reflect.ValueOf</code>返回的Value值，并不是所有情况下都是可修改的。下面示例：</p>

<pre><code>var x float64 = 3.4
v := reflect.ValueOf(x)
v.SetFloat(7.1) // Error: will panic.
</code></pre>

<p>执行代码时，报如下panic错误：</p>

<pre><code>panic: reflect.Value.SetFloat using unaddressable value
</code></pre>

<p>反射对象v不是可设置的。可设置是<code>reflect.Value</code>类型对象的一个属性，不是所有<code>Value</code>对象有此属性。<br/>
Value对象<code>CanSet</code>方法返回Value对象是否可以设置，在我们的例子中：</p>

<pre><code>var x float64 = 3.4
v := reflect.ValueOf(x)
fmt.Println("settability of v:", v.CanSet())
</code></pre>

<p>将会输出：</p>

<pre><code>settability of v: false
</code></pre>

<p><code>Settability</code>是反射对象的一个属性，它反映的是是否能够修改创建这个反射对象的原对象。<code>Settability</code>由反射对象是否持有原对象决定。</p>

<pre><code>var x float64 = 3.4
v := reflect.ValueOf(x)
</code></pre>

<p>当我们执行上面代码时，根据x生成一个interface对象作为是实参调用<code>reflect.Value</code>，interface对象保存的是x值拷贝。</p>

<pre><code>v.SetFloat(7.1)
</code></pre>

<p>上面代码修改的并不是x值。<br/>
对于函数调用，如果想修改实参，那必须传递实参地址到函数中。</p>

<pre><code>var x float64 = 3.4
p := reflect.ValueOf(&amp;x) // Note: take the address of x.
fmt.Println("type of p:", p.Type())
fmt.Println("settability of p:", p.CanSet())
</code></pre>

<p>上面代码，我们创建了一个x地址的反射对象，代码的输出如下：</p>

<pre><code>type of p: *float64
settability of p: false
</code></pre>

<p>反射对象p是不可设置的，我们不是要修改p，而是要修改p指向的x对象。  调用<code>Elem</code>方法可以获取p所指向的原对象：</p>

<pre><code>v := p.Elem()
fmt.Println("settability of v:", v.CanSet())
</code></pre>

<p>现在v对象就是可以修改的了：</p>

<pre><code>settability of v: true
</code></pre>

<p>现在v对象代表了原对象x，现在可以对v对象进行设置：</p>

<pre><code>v.SetFloat(7.1)
fmt.Println(v.Interface())
fmt.Println(x)
</code></pre>

<p>结果输出如下：<br/>
    7.1
    7.1</p>

<h3>Structs</h3>

<p>当我们拥有struct结构体对象地址时，可以对结构体对象进行修改<br/>
接下来是一个小的示例，使用结构体对象地址创建一个反射对象，然后使用reflect包中提供的结构体相关的方法，对结构体对象进行遍历和修改。</p>

<pre><code>type T struct {
    A int
    B string
}
t := T{23, "skidoo"}
s := reflect.ValueOf(&amp;t).Elem()
typeOfT := s.Type()
for i := 0; i &lt; s.NumField(); i++ {
    f := s.Field(i)
    fmt.Printf("%d: %s %s = %v\n", i,
    typeOfT.Field(i).Name, f.Type(), f.Interface())
}
</code></pre>

<p>上面代码的输出如下：</p>

<pre><code>0: A int = 23
1: B string = skidoo
</code></pre>

<p>因为s是可设置的反射对象，我们可以修改原对象的字段值：</p>

<pre><code>s.Field(0).SetInt(77)
s.Field(1).SetString("Sunset Strip")
fmt.Println("t is now", t)
</code></pre>

<p>结果如下：</p>

<pre><code>t is now {77 Sunset Strip}
</code></pre>

<h2>案例</h2>

<p>参考：</p>

<p>1、<a href="https://golang.org/pkg/reflect/">https://golang.org/pkg/reflect/</a>   <br/>
2、<a href="https://blog.golang.org/laws-of-reflection">https://blog.golang.org/laws-of-reflection</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go并发模型之Context]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/01/18/gobing-fa-mo-xing-zhi-context/"/>
    <updated>2017-01-18T15:26:37+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/01/18/gobing-fa-mo-xing-zhi-context</id>
    <content type="html"><![CDATA[<p>Go语言中go和channel是开发高并发程序的基础。我们使用channel进行goroutine程序通讯，传送数据和控制信号，<a href="https://blog.golang.org/pipelines">Pipelines and Cancelation</a>向我们讲解了如何利用Done通道来向goroutine发送结束信号：</p>

<pre><code>func main() {
    var done = make(chan struct {})
    go func(done chan struct{}) {
        select {
        case &lt;- done:
            fmt.Println("receive exit signal")
        }
    }(done)

    done &lt;- struct {}{}
    time.Sleep(3 * time.Second)
}
</code></pre>

<p>在Go服务端，每一个请求都对应会有一个goroutine进行处理。处理函数通常又会开启另外的goroutine去访问后段服务，比如数据库和RPC服务。对应一个请求创建的这一系列的goroutine通常会需要访问请求相关的信息，比如终端用户名，授权token和请求的deadline等等。当一个请求被取消或者处理超时，与这个请求相关的一些列goroutine应该尽快退出，以便系统回收资源。<br/>
Go中<code>context</code>包提供了这样的功能，利用context包可以进行请求范围内的数据传递，发送请求信号和deadline查看。本文简单示例如何使用<code>context</code>包进行goroutine并发编程。</p>

<!-- more -->


<h2>Context</h2>

<p><code>Context</code>接口定义如下：</p>

<pre><code>// A Context carries a deadline, cancelation signal, and request-scoped values
// across API boundaries. Its methods are safe for simultaneous use by multiple
// goroutines.
type Context interface {
    // Done returns a channel that is closed when this Context is canceled
    // or times out.
    Done() &lt;-chan struct{}

    // Err indicates why this context was canceled, after the Done channel
    // is closed.
    Err() error

    // Deadline returns the time when this Context will be canceled, if any.
    Deadline() (deadline time.Time, ok bool)

    // Value returns the value associated with key or nil if none.
    Value(key interface{}) interface{}
}
</code></pre>

<p><code>Context</code>接口包含四个方法。<br/>
当Context被取消或者超时时，<code>Done</code>返回的通道将会被关闭。<br/>
<code>Err</code>函数返回关闭原因。  <br/>
<code>Deadline</code>返回Context将要被取消的时间，如果设置了超时时间的话,程序可以利用Deadline的返回值判断是否需要有必要开始操作，或者利用返回值设置I/O超时时间。<br/>
<code>Value</code>方法返回与key相对应的value数据。<br/>
<code>Context</code>接口是并发安全的。可以将同一个Context对象传递给任意goroutine。</p>

<h3>派生contexts</h3>

<p>context包提供函数从已存在Conext接口对象派生新接口对象。这些对象形成了一个树，当一个Context被取消时，所有从此Context对象派生的对象都被取消。<br/>
<code>Background</code>是任何Context树的根；Background永远不会被取消</p>

<pre><code>// Background returns an empty Context. It is never canceled, has no deadline,
// and has no values. Background is typically used in main, init, and tests,
// and as the top-level Context for incoming requests.
func Background() Context
</code></pre>

<p><code>WithCancle</code>和<code>WithTimeout</code>返回一个可以比parent Context更早取消的Context接口对象。</p>

<h3>WithCancle示例</h3>

<pre><code>func f1(ctx context.Context) {
    fmt.Println("f1 running...")
    withCancel, cancel := context.WithCancel(ctx)
    defer cancel()
    go f2(withCancel)
    // wait f2 to run
    time.Sleep(time.Second)
    fmt.Println("f1 cancel f2", )
    cancel()
    ticker := time.NewTicker(time.Second)
    for ; ;  {
        select {
        case &lt;- ctx.Done():
            fmt.Println("f1, parent call canceled", ctx.Err())
        case t := &lt;- ticker.C:
            fmt.Println("f1 running at ", t)
        }

    }
}

func f2(ctx context.Context)  {
    fmt.Println("f2 running...")
    ticker := time.NewTicker(time.Second)
    for ; ;  {
        select {
        case &lt;- ctx.Done():
            fmt.Println("f2, parent call canceled", ctx.Err())
            return
        case t := &lt;- ticker.C:
            fmt.Println("f2 running at", t)
        }
    }
}

func main()  {
    ctx, cancel := context.WithCancel(context.Background())
    defer cancel()

    go f1(ctx)
    for {
        time.Sleep(5 * time.Second)
    }
    //cancel()
    //time.Sleep(5 * time.Second)
}
</code></pre>

<p><code>WithCancel</code>从parent派生出一个新Context接口对象和一个CancelFunc函数。调用CancelFunc函数时关闭<code>Done</code>返回的通道，通知子goroutine退出。</p>

<h3>WithDeadline</h3>

<p><code>WithDeadline</code> 返回一个Context接口对象，当设置的deadline时间到达时，<code>Context</code>对象<code>Done</code>可读。</p>

<pre><code>func main()  {
    n := time.Now()
    ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(5 * time.Second))
    defer cancel()
    ticker := time.NewTicker(1 * time.Second)
    for {
        select {
        case &lt;-ticker.C:
            fmt.Println("ticker timeout")
        case &lt;-ctx.Done():
            fmt.Println("context timeout", time.Since(n))
            return
        }
    }
}                                                                                                }
</code></pre>

<h3>WithTimeout示例</h3>

<p><code>WithTimeout</code>与<code>WithDeadline</code>类似，当设置的超时时间到达时，<code>Done</code>可读  <br/>
    func main()  {
        ctx, cancel := context.WithTimeout(context.Background(), 5 * time.Second)
        defer cancel()
        ticker := time.NewTicker(1 * time.Second)
        for {
            select {
            case &lt;-ticker.C:
                fmt.Println(&ldquo;ticker timeout&rdquo;)
            case &lt;-ctx.Done():
                fmt.Println(&ldquo;context timeout&rdquo;)
                return
            }
        }
    }</p>

<h3>WithValue示例</h3>

<p>使用<code>WithValue</code>来传递请求相关数据</p>

<pre><code>func WithValue(parent Context, key, val interface{}) Context
func main()  {
    ctx := context.WithValue(context.Background(), "test", "value")
    go func(ctx context.Context) {
        fmt.Println(ctx.Value("test"))
    }(ctx)
    time.Sleep(5 * time.Second)
}
</code></pre>

<h2>参考</h2>

<p>更多关于Go并发模型的讲解：<br/>
<a href="https://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation</a>         <br/>
<a href="http://talks.golang.org/2012/concurrency.slide#1">Go Concurrency Patterns</a>         <br/>
<a href="http://blog.golang.org/advanced-go-concurrency-patterns">Advanced Go Concurrency Patterns</a>      <br/>
<a href="https://blog.golang.org/context">Go Concurrency Patterns: Context</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang go命令详解]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/01/13/golang-goming-ling-xiang-jie/"/>
    <updated>2017-01-13T19:17:12+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/01/13/golang-goming-ling-xiang-jie</id>
    <content type="html"><![CDATA[<h1>go命令</h1>

<p><a href="#compile">Compile packages and dependencies</a>    <br/>
<a href="#clean">Remove object files</a><br/>
<a href="#testing">Description of testing flags</a></p>

<p><code>Go</code>工具用来管理Go语音源代码。
使用：</p>

<pre><code>go command [arguments]
</code></pre>

<p>命令为：</p>

<pre><code>build       compile packages and dependencies
clean       remove object files
doc         show documentation for package or symbol
env         print Go environment information
fix         run go tool fix on packages
fmt         run gofmt on package sources
generate    generate Go files by processing source
get         download and install packages and dependencies
install     compile and install packages and dependencies
list        list packages
run         compile and run Go program
test        test packages
tool        run specified go tool
version     print Go version
vet         run go tool vet on packages
</code></pre>

<p>使用<code>go help [command]</code>查看命令相信信息。<br/>
更多topic：</p>

<pre><code>c           calling between Go and C
buildmode   description of build modes
filetype    file types
gopath      GOPATH environment variable
environment environment variables
importpath  import path syntax
packages    description of package lists
testflag    description of testing flags
testfunc    description of testing functions
</code></pre>

<p>使用<code>go help [topic]</code>查看topic帮助信息</p>

<!-- more -->


<h2><a name="compile"></a>编译包及其依赖</h2>

<p>使用：</p>

<pre><code>go build [-o output] [-i] [build flags] [packages]
</code></pre>

<p><code>Build</code>编译包，及其依赖，但是不进行安装。</p>

<p>如果输入的是一些.go文件，build认为是编译由这些文件组成的单独包。
当单独编译main包时，build将可执行程序写入输出文件，输出文件以列出的第一个.go源文件名称命名，或者以main包源文件所在的文件夹名称命名，Windows环境下，可执行成后后缀为.exe。</p>

<p>当编译多个包或者一个非main包，build命令只是编译这些包，丢弃结果文件，只是查看包是否能够编译成功。</p>

<p>编译包时，build忽略以<code>_test.go</code>为后缀的文件。</p>

<p><code>-o</code>参数，可以用来指定编译结果存放路径。<br/>
<code>-i</code>参数，设置将目标程序依赖的包进行安装。</p>

<p>build 标志是<code>build,clean,get,install,list,run,test</code>共享的：</p>

<pre><code>-a
    force rebuilding of packages that are already up-to-date.
-n
    print the commands but do not run them.
-p n
    the number of programs, such as build commands or
    test binaries, that can be run in parallel.
    The default is the number of CPUs available.
-race
    enable data race detection.
    Supported only on linux/amd64, freebsd/amd64, darwin/amd64 and windows/amd64.
-msan
    enable interoperation with memory sanitizer.
    Supported only on linux/amd64,
    and only with Clang/LLVM as the host C compiler.
-v
    print the names of packages as they are compiled.
-work
    print the name of the temporary work directory and
    do not delete it when exiting.
-x
    print the commands.

-asmflags 'flag list'
    arguments to pass on each go tool asm invocation.
-buildmode mode
    build mode to use. See 'go help buildmode' for more.
-compiler name
    name of compiler to use, as in runtime.Compiler (gccgo or gc).
-gccgoflags 'arg list'
    arguments to pass on each gccgo compiler/linker invocation.
-gcflags 'arg list'
    arguments to pass on each go tool compile invocation.
-installsuffix suffix
    a suffix to use in the name of the package installation directory,
    in order to keep output separate from default builds.
    If using the -race flag, the install suffix is automatically set to race
    or, if set explicitly, has _race appended to it.  Likewise for the -msan
    flag.  Using a -buildmode option that requires non-default compile flags
    has a similar effect.
-ldflags 'flag list'
    arguments to pass on each go tool link invocation.
-linkshared
    link against shared libraries previously created with
    -buildmode=shared.
-pkgdir dir
    install and load all packages from dir instead of the usual locations.
    For example, when building with a non-standard configuration,
    use -pkgdir to keep generated packages in a separate location.
-tags 'tag list'
    a list of build tags to consider satisfied during the build.
    For more information about build tags, see the description of
    build constraints in the documentation for the go/build package.
-toolexec 'cmd args'
    a program to use to invoke toolchain programs like vet and asm.
    For example, instead of running asm, the go command will run
    'cmd args /path/to/asm &lt;arguments for asm&gt;'.
</code></pre>

<p>上面列的参数标志接收以空格为分隔符的字符串列表。如果参数中包含空格，那么需要将参数用单引号或者双引号包裹。</p>

<p>使用<code>go help packages</code>查看更多关于包的信息，使用<code>go help gopath</code>查看更多关于编译和安装路径的信息，使用<code>go help c</code>查看更多关于Go和C/C++调用的帮助信息。</p>

<p><code>Build</code>依附于<code>go help gopath</code>中描述的惯例。并不是所有项目遵从惯例。使用不同构建惯例或者构建系统可能会选择使用更低层的构建工具如<code>go tool compile</code>和<code>go tool link</code>。</p>

<h2><a name="clean"></a>删除目标文件</h2>

<p>使用：</p>

<pre><code>go clean [-i] [-r] [-n] [-x] [build flags] [packages]
</code></pre>

<p>将包源代码路径中的目标文件删除。<code>go</code>命令通常在临时目录构建目标对象，所以<code>go clean</code>通常用来删除其他工具或者手动执行<code>go build</code>生成的结果文件。</p>

<p>特别的，clena命令将包源码路径下生成的如下文件删除：</p>

<pre><code>_obj/            old object directory, left from Makefiles
_test/           old test directory, left from Makefiles
_testmain.go     old gotest file, left from Makefiles
test.out         old test log, left from Makefiles
build.out        old test log, left from Makefiles
*.[568ao]        object files, left from Makefiles

DIR(.exe)        from go build
DIR.test(.exe)   from go test -c
MAINFILE(.exe)   from go build MAINFILE.go
*.so             from SWIG
</code></pre>

<p><code>-i</code>参数指定go clean 命令将go install命令安装的包文件或者二进制文件删除。 <br/>
<code>-n</code>参数指定go clean把要执行的删除命令打印，但是不实际执行。<br/>
<code>-r</code>参数指定go clean对于指定包的所有依赖进行go clean命令。<br/>
<code>-x</code>参数指定go clean在执行删除操作时将命令打印。</p>

<h2><a name="testing"></a>Description of testing flags</h2>

<pre><code>-bench regexp
    Run (sub)benchmarks matching a regular expression.
    The given regular expression is split into smaller ones by top-level '/', where each must match the corresponding part of a benchmark's identifier.
    By default, no benchmarks run. To run all benchmarks,
    use '-bench .' or '-bench=.'.

-benchmem
    Print memory allocation statistics for benchmarks.

-benchtime t
    Run enough iterations of each benchmark to take t, specified as a time.Duration (for example, -benchtime 1h30s).
    The default is 1 second (1s).

-blockprofile block.out
    Write a goroutine blocking profile to the specified file when all tests are complete.
    Writes test binary as -c would.

-blockprofilerate n
    Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate with n.
    See 'go doc runtime.SetBlockProfileRate'.
    The profiler aims to sample, on average, one blocking event every n nanoseconds the program spends blocked.  By default, if -test.blockprofile is set without this flag, all blocking events are recorded, equivalent to -test.blockprofilerate=1.

-count n
    Run each test and benchmark n times (default 1).
    If -cpu is set, run n times for each GOMAXPROCS value.
    Examples are always run once.

-cover
    Enable coverage analysis.

-covermode set,count,atomic
    Set the mode for coverage analysis for the package[s] being tested. The default is "set" unless -race is enabled, in which case it is "atomic".
    The values:
        set: bool: does this statement run?
        count: int: how many times does this statement run?
        atomic: int: count, but correct in multithreaded tests; significantly more expensive.
    Sets -cover.

-coverpkg pkg1,pkg2,pkg3
    Apply coverage analysis in each test to the given list of packages.
    The default is for each test to analyze only the package being tested.
    Packages are specified as import paths.
    Sets -cover.

-coverprofile cover.out
    Write a coverage profile to the file after all tests have passed.
    Sets -cover.

-cpu 1,2,4
    Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed.  The default is the current value of GOMAXPROCS.

-cpuprofile cpu.out
    Write a CPU profile to the specified file before exiting.
    Writes test binary as -c would.

-memprofile mem.out
    Write a memory profile to the file after all tests have passed.
    Writes test binary as -c would.

-memprofilerate n
    Enable more precise (and expensive) memory profiles by setting runtime.MemProfileRate.  See 'go doc runtime.MemProfileRate'.
    To profile all memory allocations, use -test.memprofilerate=1 and pass --alloc_space flag to the pprof tool.

-outputdir directory
    Place output files from profiling in the specified directory, by default the directory in which "go test" is running.

-parallel n
    Allow parallel execution of test functions that call t.Parallel. The value of this flag is the maximum number of tests to run simultaneously; by default, it is set to the value of GOMAXPROCS.
    Note that -parallel only applies within a single test binary.
    The 'go test' command may run tests for different packages in parallel as well, according to the setting of the -p flag
    (see 'go help build').

-run regexp
    Run only those tests and examples matching the regular expression.
    For tests the regular expression is split into smaller ones by top-level '/', where each must match the corresponding part of a test's identifier.

-short
    Tell long-running tests to shorten their run time.
    It is off by default but set during all.bash so that installing the Go tree can run a sanity check but not spend time running exhaustive tests.

-timeout t
    If a test runs longer than t, panic. The default is 10 minutes (10m).

-trace trace.out
    Write an execution trace to the specified file before exiting.

-v
    Verbose output: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds.
</code></pre>
]]></content>
  </entry>
  
</feed>
