<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: golang | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/golang/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-11-11T15:54:20+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go context包源码分析]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/10/26/go-contextbao-yuan-ma-fen-xi/"/>
    <updated>2017-10-26T10:38:30+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/10/26/go-contextbao-yuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<p>Go标准库<code>context</code>定义了一个<code>Context</code>类型，Context类型包含超时时间，取消信号和请求范围内的变量值。<br/>
context包提供了<code>WithCancel</code>，<code>WithDeadline</code>和<code>WithTimeout</code>函数来分别返回不同类型的Context接口。  <br/>
下面对context包的源码进行分析：</p>

<ul>
<li><a href="#Context">Context接口</a></li>
<li><a href="#emptyCtx">空Context接口对象</a></li>
<li><a href="#cancelCtx">cancelCtx</a></li>
<li><a href="#WithDealine">WithDeadline</a></li>
<li><a href="#WithValue">WithValue</a></li>
</ul>


<!-- more -->


<h2><span id="Context">Context接口</span></h2>

<pre><code>type Context interface {
    // Dealine 返回任务完成的最后期限时间，如果没有设置Deadline，则ok返回false。
    Deadline() (deadline time.Time, ok bool)

    // Done返回一个channel，当这个Conetext代表的任务应该取消时，这个channel将会被关闭。如果这个context不应该被取消，那么Done返回nil。
    Done() &lt;- chan struct{}

    // 如果Done返回的channel没有被关闭，Err返回nil。
    // 如果Done返回的channel被关闭了，Err返回一个非nil error表示原因：Canceled表示被取消，DeadlineExceeded表示达到超时时间
    Err() error

    // Value返回context中key对应的值。如果没有key对应的值则返回nil
    Value(key interface{}) interface{}
}   
</code></pre>

<h2><span id="emptyCtx">空Context接口对象</span></h2>

<p>context包提供了两个函数<code>TODO</code>和<code>Background</code>来返回一个非nil、空Context对象。</p>

<pre><code>var (
    background = new(emptyCtx)
    todo       = new(emptyCtx)
)
func Background() Context {
    return background   
}
func TODO() Context {
    return todo
}
</code></pre>

<p><code>emptyCtx</code>类型定义如下：</p>

<pre><code>// 一个emptyCtx类型Context不可以取消，没有值，没有超时时间。它不是一个空struct{}类型，因为我们需要不同类型的emptyCtx变量拥有不同地址。  
type emptyCtx int
</code></pre>

<p>   // 下面是实现的Context接口方法
    func (*emptyCtx) Deadline() (deadline time.Time, ok bool) {
        return
    }</p>

<pre><code>func (*emptyCtx) Done() &lt;-chan struct{} {
    return nil
}

func (*emptyCtx) Err() error {
    return nil
}

func (*emptyCtx) Value(key interface{}) interface{} {
    return nil
}

func (e *emptyCtx) String() string {
    switch e {
        case background:
            return "context.Background"
        case todo:
            return "context.TODO"
    }
    return "unknown empty Context"
}
</code></pre>

<h2><span id="cancelCtx">cancelCtx</span></h2>

<p>使用<code>WithCancel</code>创建可取消Context接口</p>

<pre><code>// WithCancel返回一个新Context接口对象和一个CancelFunc函数，当parent对象Donechannel激活或者调用CancelFunc函数时，新产生的Context对象Done返回的channel通道被激活
func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {
    c := newCancelCtx(parent)
    propagateCancel(parent, &amp;c)
    return &amp;c, func() { c.cancel(true, Canceled) }
}

// newCancelCtx 返回一个初始化的cancelCtx对象.
func newCancelCtx(parent Context) cancelCtx {
    return cancelCtx{
        Context: parent,
        done:    make(chan struct{}),
    }
}


// cancelCtx可以被取消. 当cancelCtx被取消时，它同时也会取消孩子中那些实现了canceler接口的孩子
type cancelCtx struct {
    Context
    done chan struct{} // 调用取消函数时，通道被关闭

    mu       sync.Mutex
    children map[canceler]struct{} // 第一次调用cancel函数时，children设置为nil
    err      error                 // 调用cancel函数时，设置为非空
}
</code></pre>

<p>propagateCancel方法用来向父Context添加一个canceler孩子，这样当父对象结束时，同时会将孩子结束。</p>

<pre><code>func propagateCancel(parent Context, child canceler) {
    if parent.Done() == nil {
        return // 如果parent的Done为空，则parent不可以取消，比如默认的context.BackGround和context.TODO返回的接口对象
    }
    // 使用parentCancelCtx查找context链上的父cancelContext对象
    if p, ok := parentCancelCtx(parent); ok {
        p.mu.Lock()
        if p.err != nil {
            // 父对象已经被取消，那么也就没有必要再向父对象添加，此时取消子对象
            child.cancel(false, p.err)
        } else {
            // 向父对象中添加子对象
            if p.children == nil {
                p.children = make(map[canceler]struct{})
            }
            p.children[child] = struct{}{}
        }
        p.mu.Unlock()
    } else {
    // 如果父对象不是可取消对象，那么新建goroutine等待父对象结束后，取消子对象，在目前已知的集中Context接口实现，好像不能走到此流程
        go func() {
            select {
            case &lt;-parent.Done():
                child.cancel(false, parent.Err())
            case &lt;-child.Done():
            }
        }()
    }
}

// 此函数判断查找父cancelCtx对象
func parentCancelCtx(parent Context) (*cancelCtx, bool) {
    for {
        switch c := parent.(type) {
        case *cancelCtx:
            return c, true
        case *timerCtx:
            return &amp;c.cancelCtx, true
        case *valueCtx:
            parent = c.Context
        default:
            return nil, false
        }
    }
}
</code></pre>

<p>cancelCtx实现：</p>

<pre><code>// cancelCtx结构体定义
type cancelCtx struct {
    Context
    done chan struct{} // closed by the first cancel call.
    mu       sync.Mutex
    children map[canceler]struct{} // set to nil by the first cancel call
    err      error                 // set to non-nil by the first cancel call
}

// 实现Context接口Done方法，返回channel
func (c *cancelCtx) Done() &lt;-chan struct{} {
    return c.done
}
</code></pre>

<p>   // 实现Context接口Err方法，返回错误原因
    func (c *cancelCtx) Err() error {
        c.mu.Lock()
        defer c.mu.Unlock()
        return c.err
    }</p>

<pre><code>// 以字符串形式打印对象
func (c *cancelCtx) String() string {
    return fmt.Sprintf("%v.WithCancel", c.Context)
}

// cacel关闭c.done通道，取消所有子Context对象，并且从父对象中删除
func (c *cancelCtx) cancel(removeFromParent bool, err error) {
    if err == nil {
        panic("context: internal error: missing cancel error")
    }   
    c.mu.Lock()
    if c.err != nil {
        c.mu.Unlock()
        return // already canceled
    }
    c.err = err
    close(c.done)
    for child := range c.children {
        // NOTE: acquiring the child's lock while holding parent's lock.
    child.cancel(false, err)
    }
    c.children = nil
    c.mu.Unlock()

    if removeFromParent {
        removeChild(c.Context, c)
    }
}
</code></pre>

<h2><span id="WithDeadline">WithDealine</span></h2>

<p>WithDeadline创建一个具有超时时间的Conetext对象</p>

<pre><code>func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) {
    if cur, ok := parent.Deadline(); ok &amp;&amp; cur.Before(deadline) {
    //如果父Context的超时时间更早
        return WithCancel(parent)
    }
    c := &amp;timerCtx{
        cancelCtx: newCancelCtx(parent),
        deadline:  deadline,
    }
    propagateCancel(parent, c)
    d := time.Until(deadline)
    if d &lt;= 0 {
        c.cancel(true, DeadlineExceeded) // 超时时间已过
        return c, func() { c.cancel(true, Canceled) }
    }
    c.mu.Lock()
    defer c.mu.Unlock()
    if c.err == nil {
        c.timer = time.AfterFunc(d, func() {
            c.cancel(true, DeadlineExceeded)
        })
    }
    return c, func() { c.cancel(true, Canceled) }
}
</code></pre>

<h2><span id="WithValue"> WithValue </span></h2>

<pre><code>//返回一个Context接口对象，这个对象包含一个key、value对  // key必须是可比较的
func WithValue(parent Context, key, val interface{}) Context {
    if key == nil {
        panic("nil key")
    }
    if !reflect.TypeOf(key).Comparable() {
        panic("key is not comparable")
    }
    return &amp;valueCtx{parent, key, val}
}

// valueCtx包含一个键值对，它实现了Value接口方法
// 它将接口的其他方法委托给Context父对象
type valueCtx struct {
    Context
    key, val interface{}
}


func (c *valueCtx) String() string {
    return fmt.Sprintf("%v.WithValue(%#v, %#v)", c.Context, c.key, c.val)
}

func (c *valueCtx) Value(key interface{}) interface{} {
    if c.key == key {
        return c.val
    }
    return c.Context.Value(key)
}
</code></pre>

<h2>参考</h2>

<p><a href="https://blog.golang.org/context">context</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang 加密包学习与实践]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/08/19/golang-jia-mi-bao-xue-xi-yu-shi-jian/"/>
    <updated>2017-08-19T10:57:59+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/08/19/golang-jia-mi-bao-xue-xi-yu-shi-jian</id>
    <content type="html"><![CDATA[<p>Go标准库<a href="https://golang.org/pkg/crypto/">crypto</a>提供了多种加解密算法、摘要算法。本文主要是对加密包中各个算法接口进行学习实践的总结。</p>

<ul>
<li><p><a href="#aes">aes</a></p></li>
<li><p><a href="#rsa">rsa</a></p></li>
</ul>


<!-- more -->


<h2><span id="aes">aes</span></h2>

<h2><span id="rsa">rsa</span></h2>

<p><a href="https://golang.org/pkg/crypto/rsa/">rsa</a>包实现了<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem">RSA</a>)加密算法，关于<code>RSA</code>的标准为<a href="https://en.wikipedia.org/wiki/PKCS_1">PKCS #1</a>。<br/>
<code>RSA</code>既可以用与加解密也可以用与签名。<br/>
使用RSA进行加密和签名的最初标准是<code>PKCS#1</code>，<code>RSA encryption</code>和<code>RSA signatures</code>默认参照<code>PKCS#1</code>1.5版本。但是这个版本的标注存在缺陷，新的的设计应该参照第二版本，以<code>OAEP</code>和<code>PSS</code>称呼。</p>

<p><code>rsa</code>包中的相关操作不是常量时间复杂度。 <br/>
对使用包中进行加解密操作和签名操作进行说明：</p>

<blockquote><p>生成key</p></blockquote>

<pre><code>func GenerateKey(random io.Reader, bits int) (*PrivateKey, error)
</code></pre>

<p><code>random</code>为随机数源，比如<code>crypto/rand.Reader</code> <br/>
<code>bits</code>为密钥位数，目前建议是2048位</p>

<blockquote><p>加密</p></blockquote>

<pre><code>func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error)
</code></pre>

<p><code>EncryptOAEP</code>函数对消息体进行加密。<br/>
<code>hash</code>参数是一个哈希函数。对同一消息进行加解密必须使用同一种哈希函数，<code>sha256.New()</code>是一个合理选择。<br/>
<code>random</code>参数为随机数源，用来保证对同一个消息体进行两次加密时的输出不同。<br/>
<code>label</code>参数可以包含任意数据，这些数据不会被加密，标签参数给消息增加了重要的上下文信息。加解密时传入的<code>label</code>标签需要一致。如果不需要，可以为空。
<code>msg</code>待加密消息长度必须小于等于公钥长度减去2倍哈希长度。</p>

<blockquote><p>解密</p></blockquote>

<pre><code>func DecryptOAEP(hash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext []byte, label []byte) ([]byte, error)
</code></pre>

<p><code>hash</code>加解密使用的哈希函数必须一致，<code>sha256.New()</code>是一个合理选择。<br/>
<code>random</code>随机数源。<br/>
<code>label</code>参数值必须与加密时传入的值一致。</p>

<blockquote><p>加解密实践</p></blockquote>

<pre><code>func TestCrypt() {
    //create private key
    privateKey, err := rsa.GenerateKey(rand.Reader,2048)
    if err != nil {
        log.Fatal("generateKey err ",err)
        return
    }
    // encrypt
    ciphertext, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, &amp;privateKey.PublicKey, []byte("hahaha"), []byte("label"))
    if err != nil {
        log.Fatal("encrypt err ", err)
        return
    }
    log.Printf("Ciphertext: %x\n", ciphertext)
    log.Println(hex.EncodeToString(ciphertext))
    plaintext, err := rsa.DecryptOAEP(sha256.New(), rand.Reader, privateKey, ciphertext, []byte("label"))
    if err != nil || bytes.Compare([]byte("hahaha"), plaintext) != 0 {
        log.Fatal("decrypt err: ", err)
        return
    }
    log.Println("plaintext :", string(plaintext))
}
</code></pre>

<blockquote><p>签名</p></blockquote>

<pre><code>func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, opts *PSSOptions) ([]byte, error)
</code></pre>

<p><code>rand</code>为随机数源。<br/>
<code>priv</code>为进行签名用到的私钥。<br/>
<code>SignPSS</code>函数依据<code>RSASSA-PSS</code>标准计算摘要数据的签名。注意：摘要数据必须是使用指定哈希函数对输入数据计算得出的摘要值。<code>opts</code>参数可以为空，此时使用默认值。</p>

<blockquote><p>验证签名</p></blockquote>

<pre><code>func VerifyPSS(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte, opts *PSSOptions) error
</code></pre>

<p>VerifyPSS验证PSS签名。<code>hashed</code>是使用指定函数对输入数据计算得出的摘要值。sig为签名数据。opts可以为空。</p>

<blockquote><p>签名实践</p></blockquote>

<pre><code>func TestSign() {
    //create private key
    privateKey, err := rsa.GenerateKey(rand.Reader,2048)
    if err != nil {
        log.Fatal("generateKey err ",err)
        return
    }
    // sign
    hashed := sha256.Sum256([]byte("hahaha"))
    /*
    opts := rsa.PSSOptions{
       SaltLength:10,
        Hash:crypto.SHA256,
    }
    */
    sig, err := rsa.SignPSS(rand.Reader,privateKey, crypto.SHA256,  hashed[:], nil)
    if err != nil {
        log.Fatal("SignPSS err ", err)
        return
    }
    log.Println(hex.EncodeToString(sig))
    err = rsa.VerifyPSS(&amp;privateKey.PublicKey, crypto.SHA256, hashed[:], sig, nil)
    if err != nil {
        log.Fatal("VerifyPSS err", err)
        return
    }
    log.Println("VerifyPSS suc")
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang加两遍读锁导致程序死锁问题分析]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/06/20/golangjia-liang-bian-du-suo-dao-zhi-cheng-xu-si-suo-wen-ti-ji-lu/"/>
    <updated>2017-06-20T21:42:04+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/06/20/golangjia-liang-bian-du-suo-dao-zhi-cheng-xu-si-suo-wen-ti-ji-lu</id>
    <content type="html"><![CDATA[<p>golang程序使用读写锁对共享数据进行互斥保护时，注意在同一程序调用栈不要对锁进行多次加锁，这样会导致程序死锁，如下的代码片段就会导致程序死锁：</p>

<pre><code>import (
"sync"
"fmt"
"time"
_ "net/http/pprof"
"net/http"
)

var mutex sync.RWMutex

func f()  {
    fmt.Println("f begin to get Rlock ")
    mutex.RLock()
    defer mutex.RUnlock()
    fmt.Println("f get Rlock suc")
}

func main() {
    mutex.RLock()
    fmt.Println("main get RLock suc")
    defer mutex.RUnlock()

    go http.ListenAndServe(":6060", nil)
    go func() {
        fmt.Println("other goroutine begin to get write lock")
        mutex.Lock()
        defer mutex.Unlock()
        fmt.Println("other goroutine get write lock suc“)
    }()
    time.Sleep(time.Second)
    f()
}
</code></pre>

<p>程序执行结果如下：</p>

<pre><code>MacBook-Pro-2:sync jintao$ go run main.go 
main get RLock suc
other goroutine begin to get write lock
f begin to get Rlock
</code></pre>

<!-- more -->


<p>通过pprof工具查看相关goroutine调用栈：<br/>
main goroutine阻塞在获取读锁的位置：</p>

<pre><code>1 @ 0x102dfca 0x102e0ae 0x103e5a1 0x103e1a4 0x1060869 0x13119c6 0x1311bd7 0x102db7a 0x1059c01
#   0x103e1a3   sync.runtime_Semacquire+0x33    /usr/local/go/src/runtime/sema.go:47
#   0x1060868   sync.(*RWMutex).RLock+0x48  /usr/local/go/src/sync/rwmutex.go:43
#   0x13119c5   main.f+0xa5         /Users/jintao/Project/test/Golang/src/goutil/sync/main.go:15
#   0x1311bd6   main.main+0x136         /Users/jintao/Project/test/Golang/src/goutil/sync/main.go:33
#   0x102db79   runtime.main+0x209      /usr/local/go/src/runtime/proc.go:185
</code></pre>

<p>子goroutine阻塞在获取写锁的位置：</p>

<pre><code>1 @ 0x102dfca 0x102e0ae 0x103e5a1 0x103e1a4 0x106098e 0x1311cb6 0x1059c01
#   0x103e1a3   sync.runtime_Semacquire+0x33    /usr/local/go/src/runtime/sema.go:47
#   0x106098d   sync.(*RWMutex).Lock+0x6d   /usr/local/go/src/sync/rwmutex.go:91
#   0x1311cb5   main.main.func1+0xa5        /Users/jintao/Project/test/Golang/src/goutil/sync/main.go:28
</code></pre>

<p>通过上面的调用栈，我们发现main goroutine在第21行已经获取了读锁，当在调用的函数<code>f</code>第15行再次尝试获取读锁时，程序阻塞。创建的goroutine在第28行尝试获取写所时，协程阻塞。</p>

<h2>分析</h2>

<p>这个是读写锁的一个标准行为。在
<a href="https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">Wikipedia &ldquo;Readers–writer lock&rdquo;</a>词条中对读写锁进行了介绍，在<code>Priority policies</code>一节中对<code>reader</code>和<code>writer</code>加锁时的优先级策略进行了说明，不同的优先级策略会给并发和死锁带来不同的影响：</p>

<ul>
<li>读优先策略 <br/>
  读优先允许最大并发，但是如果读并发太多，可能导致写饥饿。<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwji0rOAh9bUAhUW12MKHYx9CvUQFggyMAI&amp;url=http%3A%2F%2Fwww.beck-shop.de%2Ffachbuch%2Fleseprobe%2F9783642320262_Excerpt_001.pdf&amp;usg=AFQjCNEskoEL2n3HKpHGYVWc_XpU4z90nw">Concurrent Programming: Algorithms, Principles, and Foundations</a></li>
<li>写优先策略<br/>
  写优先策略可以避免上面读优先导致的写锁饥饿问题，如果有一个写锁着在等待，系统将会组织任何新reader加读锁成功，一旦当前已经获取的读锁释放完后，即会成功获取写锁。写优先策略相比较与读优先策略，会降低系统的并发性能。相对于读优先策略，写优先策略在实现上的效率要低，因为在获取或者释放读锁或者写锁时，都要操作多个互斥锁。</li>
<li>不指定优先级策略
  这种策略在一定场景下的效率更高</li>
</ul>


<p>从上面Wikipedia关于读写锁的说明看，golang中关于读写锁使用的是写优先策略，下面查看源码，对源码进行分析</p>

<h2>源码解析</h2>

<p>读写锁实现在sync/rwmutex.go文件中</p>

<pre><code>type RWMutex struct {
    w           Mutex  // 获取写锁时，必须获取的互斥量
    writerSem   uint32 // 写锁信号量
    readerSem   uint32 // 读锁信号量
    readerCount int32  // 目前获取的读锁个数
    readerWait  int32  // 需要等待reader释放锁个数
}
</code></pre>

<p><code>加载读锁：</code></p>

<pre><code>// RLock locks rw for reading.
func (rw *RWMutex) RLock() {
    if race.Enabled {
        _ = rw.w.state
        race.Disable()
    }
    if atomic.AddInt32(&amp;rw.readerCount, 1) &lt; 0 {
        // A writer is pending, wait for it.
        runtime_Semacquire(&amp;rw.readerSem)
    }
    if race.Enabled {
        race.Enable()
        race.Acquire(unsafe.Pointer(&amp;rw.readerSem))
    }
}
</code></pre>

<p>每次获取读锁时，都对readerCount计数器进行加1，如果加1后值为负，那么说明有人正在获取写锁。等待readerSem信号量变为正</p>

<p><code>释放读锁：</code></p>

<pre><code>func (rw *RWMutex) RUnlock() {
    if race.Enabled {
        _ = rw.w.state
        race.ReleaseMerge(unsafe.Pointer(&amp;rw.writerSem))
        race.Disable()
    }
    if r := atomic.AddInt32(&amp;rw.readerCount, -1); r &lt; 0 {
        if r+1 == 0 || r+1 == -rwmutexMaxReaders {
            race.Enable()
            panic("sync: RUnlock of unlocked RWMutex")
        }
        // A writer is pending.
        if atomic.AddInt32(&amp;rw.readerWait, -1) == 0 {
            // The last reader unblocks the writer.
            runtime_Semrelease(&amp;rw.writerSem)
        }
    }
    if race.Enabled {
        race.Enable()
    }
}
</code></pre>

<p>释放写锁时，对readerCount减1，说明获取释放一个读锁，如果最新值为负，那么说明有人正在尝试获取写锁，readerWait记录了写锁需要等待的读锁个数，此时将readerWait个数减1，如果个素减为0，说明写锁正在等待的所有reader都已经释放读锁，此时可以释放写锁信号量，让程序获取写锁。</p>

<p><code>获取写锁：</code></p>

<pre><code>func (rw *RWMutex) Lock() {
    if race.Enabled {
        _ = rw.w.state
        race.Disable()
    }
    // First, resolve competition with other writers.
    rw.w.Lock()
    // Announce to readers there is a pending writer.
    r := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders
    // Wait for active readers.
    if r != 0 &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != 0 {
        runtime_Semacquire(&amp;rw.writerSem)
    }
    if race.Enabled {
        race.Enable()
        race.Acquire(unsafe.Pointer(&amp;rw.readerSem))
        race.Acquire(unsafe.Pointer(&amp;rw.writerSem))
    }
}
</code></pre>

<p>获取写锁时，首先获取互斥锁，这样其他写锁必须等待。然后设置读锁个数为负值，这样后面的reader就无法获取到读锁。如果读锁没有释放，则等待写锁信号量变为正。</p>

<p><code>释放写锁：</code></p>

<pre><code>func (rw *RWMutex) Unlock() {
    if race.Enabled {
        _ = rw.w.state
        race.Release(unsafe.Pointer(&amp;rw.readerSem))
        race.Release(unsafe.Pointer(&amp;rw.writerSem))
        race.Disable()
    }

    // Announce to readers there is no active writer.
    r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)
    if r &gt;= rwmutexMaxReaders {
        race.Enable()
        panic("sync: Unlock of unlocked RWMutex")
    }
    // Unblock blocked readers, if any.
    for i := 0; i &lt; int(r); i++ {
        runtime_Semrelease(&amp;rw.readerSem)
    }
    // Allow other writers to proceed.
    rw.w.Unlock()
    if race.Enabled {
        race.Enable()
    }
}
</code></pre>

<p>释放写锁时，将等待获取读锁的个数变为实际值，根据等待获取读锁的个数，释放读锁信号量。</p>

<h2>结论</h2>

<p>根据上面对读写锁源码的分析，我们可以看到golang中读写锁是使用写锁优先策略的，博文开头的例子中，main主协程在已经获取读锁的情况，又尝试第二次获取读锁，因为已经创建了一个子协程在获取写锁，那么第二次获取读锁操作将被阻塞，这样就导致主协程无法释放第一次获取的读锁，从而子协程获取写锁失败，这样整个程序两个写成处于死锁状态。</p>

<h2>参考</h2>

<ul>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/4sx5pPp8gFw">Lock re-accquision in sync forbiden</a></li>
<li><a href="https://golang.org/pkg/sync/#RWMutex.Lock">Package sync</a></li>
<li><a href="https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">Readers–writer lock</a></li>
<li><a href="https://stackoverflow.com/questions/30547916/goroutine-blocks-when-calling-rwmutex-rlock-twice-after-an-rwmutex-unlock">goroutine blocks when calling RWMutex RLock twice after an RWMutex Unlock</a></li>
<li><a href="https://github.com/golang/go/issues/15418">sync: document that double RLock isn&rsquo;t safe #15418</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang 工程代码结构]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/06/11/golang-gong-cheng-dai-ma-jie-gou/"/>
    <updated>2017-06-11T12:19:45+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/06/11/golang-gong-cheng-dai-ma-jie-gou</id>
    <content type="html"><![CDATA[<p>golang工程常用代码目录结构</p>

<pre><code>github.com/user/project
    pkg
        p1
            *.go
        p2
            *.go 
    cmd
        cmdline
            main.go
    web
            main.go
    vendor
        github/*/*
    examples
    docs
</code></pre>

<h2>参考</h2>

<ul>
<li><p><a href="https://stackoverflow.com/questions/32634837/project-structure-for-a-tool-with-multiple-uis/32635264#32635264">Project structure for a tool with multiple UIs</a></p></li>
<li><p><a href="https://forum.golangbridge.org/t/how-should-i-structure-packages-for-a-multiple-binary-web-application/665">How should I structure packages for a multiple-binary web application?</a></p></li>
<li><a href="https://github.com/seccom/kpass">kpass</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
