<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tls | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/tls/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-09-04T20:23:38+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[openssl实战]]></title>
    <link href="http://jintao-zero.github.io/blog/2017/08/09/opensslshi-zhan/"/>
    <updated>2017-08-09T17:50:42+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2017/08/09/opensslshi-zhan</id>
    <content type="html"><![CDATA[<p>本篇文章主要是对openssl的使用进行实践总结。</p>

<ul>
<li><a href="#key">生成密钥</a></li>
<li><a href="#crt">创建证书</a></li>
<li><a href="#practice">实践</a></li>
</ul>


<!-- more -->


<h2><span id="key">生成密钥</span></h2>

<h3>生成RSA密钥</h3>

<p>命令：<br/>
<code>
openssl genrsa [-out filename] [-passout arg] [-aes128] [-aes128] [-aes192] [-aes256] [-camellia128] [-camellia192] [-camellia256] [-aes192]
       [-aes256] [-camellia128] [-camellia192] [-camellia256] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]
</code>
参数：<br/>
<code>-out filename</code> 输出到结果文件。如果不指定，则输出到标准输出。<br/>
<code>-aes128|-aes192|-aes256|-camellia128|-camellia192|-camellia256|-des|-des3|-idea</code> <br/>
指定加密算法加密密钥。<br/>
<code>numbits</code>指定密钥位数。默认为512位</p>

<p>生成一个2048位rsa非对称密钥，保存到rsa-fd.key文件中：</p>

<pre><code>openssl genrsa -out rsa-fd.key 2048
</code></pre>

<p><code>rsa-fd.key</code>文件为<code>PEM</code>格式：</p>

<pre><code>$ file rsa-fd.key
rsa-fd.key: PEM RSA private key
</code></pre>

<p>使用<code>rsa</code>命令解析出私钥结构：</p>

<pre><code>openssl rsa -text -in rsa-fd.key
</code></pre>

<p>查看私钥中的公开部分：</p>

<pre><code>openssl rsa -in rsa-fd.key -pubout -out rsa-pub.key
</code></pre>

<h3>生成DSA密钥</h3>

<p>DSA的密钥生成分成两个部分:先生成DSA的参数，然后再生成密钥。
命令：</p>

<pre><code>openssl dsaparam -genkey 2048 | openssl dsa -out dsa.key
</code></pre>

<h3>生成ECDSA密钥</h3>

<p>创建ECDSA密钥的过程是类似的，但是不能创建任意长度的密钥。对于每个密钥，你需要选择一个命名曲线(named curve)，它可以控制密钥长度，同时也限定了椭圆曲线的参数。下面的例子使用secp256r1这个命名曲线创建一个256位长度的ECDSA密钥</p>

<pre><code>openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key
</code></pre>

<h2><span id="crt">创建证书</span></h2>

<h3>创建证书申请</h3>

<blockquote><p>使用openssl req命令交互式生成创建证书申请：</p></blockquote>

<pre><code>$ openssl req -new -key rsa-fd.key -out rsa-fd.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:ShangHai
Locality Name (eg, city) []:ShangHai
Organization Name (eg, company) [Internet Widgits Pty Ltd]:limo
Organizational Unit Name (eg, section) []:limo
Common Name (e.g. server FQDN or YOUR name) []:localhost
Email Address []:.

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:.
An optional company name []:.
$
</code></pre>

<p>其中<code>Common Name</code>指定证书保护的域名。</p>

<blockquote><p>使用openssl req查看证书申请内容：</p></blockquote>

<pre><code>Data:
        Version: 0 (0x0)
        Subject: C=CN, ST=ShangHai, L=ShangHai, O=limo, OU=limo, CN=localhost
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (2048 bit)
                Modulus (2048 bit):
                    00:c0:2b:11:a0:53:7d:fa:83:7f:29:2b:b5:dc:bc:
                Exponent: 65537 (0x10001)
        Attributes:
            a0:00
Signature Algorithm: sha1WithRSAEncryption
        7c:3d:47:49:d5:f7:c9:89:65:81:62:3d:bb:84:b8:ed:70:c4:
        e8:ba:ae:03:2e:af:3a:cb:31:07:e3:ef:57:a1:c7:a8:a6:c8:
</code></pre>

<blockquote><p>使用配置文件生成证书：</p></blockquote>

<p>配置文件内容如下：</p>

<pre><code>[req]
prompt = no
distinguished_name = dn
req_extensions     = ext

[dn]
CN      = localhost
O       = limo
L       = ShangHai
C       = CN

[ext]
subjectAltName = DNS:www.localhost.com,DNS:localhost
</code></pre>

<p>执行命令如下：</p>

<pre><code>$ openssl req -new -config rsa-fd.conf -key rsa-fd.key -out t.csr
</code></pre>

<h3>自签名证书</h3>

<p>如果已经有了csr，则执行以下命令创建证书：</p>

<pre><code>$ openssl x509 -req -days 365 -in rsa-fd.csr -signkey rsa-fd.key -out rsa-fd.crt
Signature ok
subject=/C=CN/ST=ShangHai/L=ShangHai/O=limo/OU=limo/CN=localhost
Getting Private key
</code></pre>

<h2><span id="practice"> 实践 </span></h2>

<blockquote><p>创建根CA证书</p></blockquote>

<ol>
<li><p>创建rsa密钥</p>

<pre><code class="`"> $ openssl genrsa -out ca.key 2048  
 Generating RSA private key, 2048 bit long modulus  
 ........+++  
 ..................................................+++  
 e is 65537 (0x10001)  
</code></pre></li>
<li><p>创建证书申请</p>

<pre><code> $ openssl genrsa -out ca.key 2048 -out ca.csr
 $ 
</code></pre></li>
<li><p>创建自签名证书</p>

<pre><code> $ openssl x509 -req -in ca.csr -signkey ca.key  -out ca.crt
 Signature ok
 subject=/C=CN/ST=ShangHai/L=ShangHai/O=li/OU=li/CN=RootCA
 Getting Private key
</code></pre></li>
</ol>


<blockquote><p>创建client密钥和证书</p></blockquote>

<ol>
<li><p>创建rsa密钥</p>

<pre><code class="`"> $ openssl genrsa -out client.key 2048
Generating RSA private key, 2048 bit long modulus
..................................+++
..........+++
e is 65537 (0x10001)
</code></pre></li>
<li><p>创建证书申请</p>

<pre><code> openssl req -new -key client.key -out client.csr
</code></pre></li>
<li><p>使用root CA签名client证书</p>

<pre><code> $ openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt
 Signature ok
 subject=/C=CN/ST=ShangHai/L=SH/O=li/OU=li/CN=localhost  
 Getting CA Private Key
</code></pre>

<p>需要增加<code>-CAcreateserial</code>参数否则报错</p></li>
</ol>


<blockquote><p>创建server密钥和证书</p></blockquote>

<p>方法同生成client密钥证书类似</p>

<blockquote><p>使用Go创建https server，并对客户端进行双向验证：</p></blockquote>

<pre><code>func HelloServer(w http.ResponseWriter, req *http.Request) {
    w.Header().Set("Content-Type", "text/plain")
    w.Write([]byte("This is an example server.\n"))
}

func main() {
    pool := x509.NewCertPool()
    caPath := "ca.crt"
    caCrt, err := ioutil.ReadFile(caPath)
    if err != nil {
        fmt.Println("ReadFile err ", err)
        return
    }
    ok := pool.AppendCertsFromPEM(caCrt);
    if !ok {
        fmt.Println("append err")
        return
    }

    fmt.Println(ok)
    tlsConfig := &amp;tls.Config{
        ClientCAs:pool,
        ClientAuth: tls.RequireAndVerifyClientCert,
    }
    server := http.Server{
        Addr:      ":443",
        TLSConfig: tlsConfig,
    }
    http.HandleFunc("/hello", HelloServer)
    err = server.ListenAndServeTLS("server.crt", "server.key")
    log.Fatal(err)
}
</code></pre>

<blockquote><p>使用Go创建https client</p></blockquote>

<pre><code>func main() {
    pool := x509.NewCertPool()
    caPath := "ca.crt"
    caCrt, err := ioutil.ReadFile(caPath)
    if err != nil {
        fmt.Println("ReadFile err:", err)
        return
    }
    pool.AppendCertsFromPEM(caCrt)
    cliCrt, err := tls.LoadX509KeyPair("client.crt", "client.key")
    if err != nil {
        fmt.Println("Loadx509keypair err:", err)
        return
    }
    tlsConfig := &amp;tls.Config{
        RootCAs:      pool,
        Certificates: []tls.Certificate{cliCrt},
        InsecureSkipVerify:true,
    }
    tr := http.Transport{TLSClientConfig: tlsConfig}
    client := http.Client{Transport: &amp;tr}
    url := "https://localhost/hello"
    resp, err := client.Get(url)
    if err != nil {
        panic(err)
    }
    data, err := ioutil.ReadAll(resp.Body)
    fmt.Println(string(data))
}
</code></pre>

<p><a href="https://github.com/jintao-zero/go-practice/tree/master/https">code</a></p>

<h2>参考</h2>

<ol>
<li><a href="">https权威指南</a></li>
<li><a href="http://tonybai.com/2015/04/30/go-and-https/">Go和HTTPS</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
