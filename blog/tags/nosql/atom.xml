<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Nosql | jintao's blog]]></title>
  <link href="http://jintao-zero.github.io/blog/tags/nosql/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2017-03-07T15:41:26+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hiredis C语言Redis客户端库使用]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/11/22/hiredis-cyu-yan-rediske-hu-duan-ku-shi-yong/"/>
    <updated>2015-11-22T11:21:43+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/11/22/hiredis-cyu-yan-rediske-hu-duan-ku-shi-yong</id>
    <content type="html"><![CDATA[<p>Redis是一款依据BSD开源协议发型的高性能Key-Value存储系统(cache and store)。它通常称为数据结构服务器，因为值(value)可以是字符串(String)，哈希(Hase)，列表(List)，集合(Set)和有序集合(sorted sets)等类型。</p>

<p>本文对RedisC语言客户端库<a href="https://github.com/redis/hiredis#using-replies">hireis</a>的安装、使用进行简单介绍。</p>

<h2>Redis安装</h2>

<p>参考<a href="http://redis.io/download">Redis</a>官网中的安装指导进行安装：<br/>
1、下载、解压和编译安装</p>

<pre><code>$ wget http://download.redis.io/releases/redis-3.0.5.tar.gz
$ tar xzf redis-3.0.5.tar.gz
$ cd redis-3.0.5
$ make
</code></pre>

<p>2、运行服务端
    编译声称的二进制文件在redis目录下的src子目录中，如下运行：</p>

<pre><code>$ src/redis-server
</code></pre>

<p>3、使用命令行工具与redis-server进行交互：</p>

<pre><code>$ src/redis-cli
redis&gt; set foo bar
OK
redis&gt; get foo
"bar"
</code></pre>

<p>详细的redis使用文档请参考<a href="http://redis.io/documentation">官网</a></p>

<!-- more -->


<h2>hiredis安装</h2>

<p>上面下载的Redis源代码目录的deps/hiredis目录中包含了hiredis的源代码，也可以从hiredis在github的网址下载：</p>

<pre><code>$ git clonet https://github.com/redis/hiredis.git
$ make
$ make install
</code></pre>

<p>以上命令会将相关.h头文件拷贝到/usr/local/include/hiredis/目录，<br/>
同时将hiredis相关库文件拷贝到/usr/local/lib/目录。</p>

<pre><code>-rw-rw-r--  1 jintao jintao 431534 11月  9 21:28 libhiredis.a
lrwxrwxrwx  1 root   root       15 11月  9 21:50 libhiredis.so -&gt; libhiredis.so.0*
lrwxrwxrwx  1 root   root       18 11月  9 21:50 libhiredis.so.0 -&gt; libhiredis.so.0.11*
-rwxrwxr-x  1 jintao jintao 219340 11月  9 21:50 libhiredis.so.0.11*
</code></pre>

<h2>hiredis接口</h2>

<p>hiredis库接口分为同步和异步两种接口，本文主要使用的是同步接口，主要涉及一下几个:</p>

<pre><code>redisContext *redisConnect(const char *ip, int port);
void *redisCommand(redisContext *c, const char *format, ...);
void freeReplyObject(void *reply);
</code></pre>

<h3>建立连接</h3>

<pre><code>redisContext *redisConnect(const char *ip, int port);
</code></pre>

<p>redisConnect函数用来创建一个到redis服务器的连接，并返回一个redisContext类型的指针。redisContext对象用来维护连接的状态。<br/>
redisContext对象中err字段非0表示连接处于异常状态。 <br/>
redisContext对象errstr字段包含错误信息描述字符串。<br/>
使用redisConnect接口连接Redis服务器后，需要判断是否连接成功：</p>

<pre><code>redisContext *c = redisConnect("127.0.0.1", 6379);
if (c != NULL &amp;&amp; c-&gt;err) {
    printf("Error: %s\n", c-&gt;errstr);
    // handle error
}
</code></pre>

<h3>发送命令</h3>

<p>有多个方法发送命令到Redis。现在介绍redisCommand函数，redisCommand函数类似printf。最简单的形式如下：</p>

<pre><code>reply = redisCommand(context, "SET foo bar");
</code></pre>

<p>%s标识符用来将字符串格式到命令中。</p>

<pre><code>reply = redisCommand(context, "SET foo %s", value);
</code></pre>

<p>%b标识符可以用来将二进制数据格式化到命令中，valuelen为数据长度。</p>

<pre><code>reply = redisCommand(context, "SET foo %b", value, (size_t) valuelen);
</code></pre>

<h3>处理命令结果</h3>

<p><code>redisCommand</code>执行成功后，返回一个<code>redisReply</code>对象保存执行结果。<br/>
当命令执行异常，redisCommand返回<code>NULL</code>,设置<code>context</code>对象<code>err</code>字段记录错误原因。<br/>
当执行命令异常，<code>context</code>失效，必须重新建立到redis服务器的连接。<br/>
<code>redisReply</code>对象中的<code>type</code>字段标识返回类型：</p>

<ul>
<li><p>REDIS_REPLY_STRING:<br/>
命令返回值类型为字符串。reply->str代表返回的字符串值。</p></li>
<li><p>REDIS_REPLY_STATUS:<br/>
  命令返回一个状态。通过reply->str获取状态字符串。状态字符串的长度为reply->len。</p></li>
<li><p>REDIS_REPLY_ERROR:
  命令执行失败，返回一个错误。错误原因字符串通过reply->str获取。</p></li>
<li><p>REDIS_REPLY_INTEGER:<br/>
  命令返回一个整型。整型的值可以通过reply->integer字段获取，整型类型为long long。</p></li>
<li><p>REDIS_REPLY_NIL:<br/>
  命令返回一个nil对象。没有数据可以获取。</p></li>
<li><p>REDIS_REPLY_ARRAY:  <br/>
  返回值为一个数组。reply->elements中保存对象个数。每个对象都是一个<code>redisReply</code>对象。通过reply->element[..index..]获取这些对象。</p></li>
</ul>


<p><code>redisReply</code>对象需要使用<code>freeReplyObject()</code>进行释放，返回对象中的子对象无需使用<code>freeReplyObject()</code>进行释放。</p>

<h3>管道批量发送命令</h3>

<p>当redisCommand命令被调用时，Hiredis首先根据Redis协议格式化命令。格式化后的命令被放到context维护的输出缓冲区中。输出缓冲区是动态的，可以容纳很多命令。命令被放置到输出缓冲区以后，调用redisGetReply获取返回值。redisGetReply有如下两条执行路径：</p>

<pre><code>1. 输入缓冲区非空：  
    从输入缓冲区中解析一个reply应答并返回。
    如果不能解析出一个reply，则走到第二条路径  

2. 输入缓冲区为空：
    将输出缓冲区写到socket。
    读取socket并解析出一个reply。
</code></pre>

<p>使用管道批量发送命令，就是使用如下命令填充输出缓冲区：</p>

<pre><code>void redisAppendCommand(redisContext *c, const char *format, ...);
void redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);
</code></pre>

<p>调用数次上面函数发送命令后，调用<code>redisGetReply</code>获取随后的返回值。<br/>
下面例子是一个简单的使用管道发送命令的例子（只有一次调用write（2）和一次调用read（2））：</p>

<pre><code>redisReply *reply;
redisAppendCommand(context,"SET foo bar");
redisAppendCommand(context,"GET foo");
redisGetReply(context,&amp;reply); // reply for SET
freeReplyObject(reply);
redisGetReply(context,&amp;reply); // reply for GET
freeReplyObject(reply);  
</code></pre>

<h3>示例：</h3>

<pre><code>#include &lt;hiredis/hiredis.h&gt;

int main()
{
    // create a connection
    redisContext *context = redisConnect("127.0.0.1", 6379);
    if ( context != NULL &amp;&amp; context-&gt;err) {
        printf("connect to redis fail.%s\n", context-&gt;errstr);
        return -1;
    }

    redisReply *reply = redisCommand(context, "select 0");
    if (NULL != reply) {
        if (REDIS_REPLY_STATUS == reply-&gt;type &amp;&amp; strcmp(reply-&gt;str,"OK") == 0) {
            printf("command:select 0 suc.type: %d, str:%s\n", REDIS_REPLY_STATUS, "OK");
        } 
        else {
            printf("command:select 0 fail.type: %d, str:%s\n", reply-&gt;type, reply-&gt;str);
            freeReplyObject(reply);
            redisFree(context);
            return -1;
        }
    } else {
        printf("command:select 0 fail.\n");
        redisFree(context);
        return -1;
    }
    freeReplyObject(reply);

    char *c1 = "set key1 eeee";
    reply = redisCommand(context, c1);
    if (NULL != reply) {
        if (reply-&gt;type == REDIS_REPLY_ERROR) {
            printf("command:%s excute fail: type: %d, str:%s\n", c1, reply-&gt;type, reply-&gt;str);
        }
        printf("command:%s excute ret: type: %d, str:%s\n", c1, reply-&gt;type, reply-&gt;str);
    } else {
        printf("command:%s fail\n", c1);
        redisFree(context);
        return -1;
    }
    freeReplyObject(reply);

    char *c2 = "set key2 222";
    char *c3 = "get list_key1";
    redisAppendCommand(context, c2);
    redisAppendCommand(context, c3);

    char *get_cmd = "get key1";
    reply = redisCommand(context, get_cmd);
    if (reply != NULL) {
        if (reply-&gt;type == REDIS_REPLY_ERROR) {
            printf("%s fail.type:%d value:%s\n", get_cmd, reply-&gt;type, reply-&gt;str);
        } else if (reply-&gt;type == REDIS_REPLY_STRING) {
            printf("%s suc.type:%d value:%s\n", get_cmd, reply-&gt;type, reply-&gt;str);
        }
        freeReplyObject(reply);
    } else {
        printf("%s execute fail.\n", get_cmd);
        redisFree(context);
        return -1;
    }

// list
// hash
char *hgetall = "hgetall hash_key1";
reply = redisCommand(context, hgetall);
if (reply != NULL) {
    if (reply-&gt;type == REDIS_REPLY_ERROR) {
        printf("%s ,type:%d result:%s\n", hgetall, REDIS_REPLY_ERROR, reply-&gt;str);
    } else if (reply-&gt;type == REDIS_REPLY_NIL) {
        printf("%s ,type:%d result:%s\n", hgetall, REDIS_REPLY_NIL, reply-&gt;str);
    } else if (reply-&gt;type == REDIS_REPLY_ARRAY) {
        printf("%s ,type:%d elements:%lu \n", hgetall, REDIS_REPLY_ARRAY, reply-&gt;elements);
        int i;
        for (i = 0; i &lt; reply-&gt;elements; i++) {
            redisReply *tmp = reply-&gt;element[i];
            if (tmp-&gt;type == REDIS_REPLY_INTEGER){
                printf("elements[%d],type:%d result:%lld\n", i, REDIS_REPLY_INTEGER, tmp-&gt;integer);
            } else if (tmp-&gt;type == REDIS_REPLY_STRING) {
                printf("elements[%d] ,type:%d result:%s\n", i, REDIS_REPLY_STRING, tmp-&gt;str);
            }
            printf("index:%d ,type:%d \n", i, tmp-&gt;type);
        }
    }
    freeReplyObject(reply);
} else {
    printf("%s fail\n", hgetall);
}
redisFree(context);
return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
