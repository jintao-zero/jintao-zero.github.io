<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[金涛的博客]]></title>
  <link href="http://jintao-zero.github.io/atom.xml" rel="self"/>
  <link href="http://jintao-zero.github.io/"/>
  <updated>2015-02-13T16:48:04+08:00</updated>
  <id>http://jintao-zero.github.io/</id>
  <author>
    <name><![CDATA[jintao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tcp 服务端例子]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/02/13/tcp-fu-wu-duan-li-zi/"/>
    <updated>2015-02-13T11:04:43+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/02/13/tcp-fu-wu-duan-li-zi</id>
    <content type="html"><![CDATA[<p>实现了一个简单服务端，使用tcp与客户端进行通讯。本片文章主要介绍在tcp服务端网络编程中用到的几个基本函数：<br/>
1、创建套接字socket函数</p>

<pre><code>int socket(int domain, int type, int protocol)
</code></pre>

<p>socket函数创建一个通讯端并返回这个终端的文件描述符。</p>

<p>参数domain指定发生整个通讯过程所在的协议域。协议域定义在&lt;sys/socket.h>头文件中，常用协议域名为：</p>

<pre><code>PF_LOCAL 主机内部通讯协议，之前名为PF_UNIX
PF_UNIX  主机内部通讯协议，废弃，使用PF_LOCAL
PF_INET  IPV4通讯协议
PF_INET6 IPV6通讯协议
。。。
</code></pre>

<p>本例子中使用PF_INET ipv4通讯协议域</p>

<p>参数type指定socket类型，目前定义类型为：</p>

<pre><code>SOCK_STREAM                                      
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
</code></pre>

<p>SOCK_STREAM 类型提供序列化、可靠的、全双工字节流套接字
SOCK_DGRAM 类型提供无连接的、不可靠的，有报文最大限制的数据报通讯套接字
SOCK_RAW 类型提供读取内部网络协议和网卡接口的原始套接字，需要有超级用户权限<br/>
本例子中使用SOCK_STREAM流套接字类型</p>

<p>失败时，函数返回-1，成功时，返回套接字文件描述符</p>

<p>2、bind函数</p>

<pre><code>int bind(int socket, const struct sockaddr *address, socklen_t address_len);
</code></pre>

<p>bind函数把一个本地协议地址赋予一个套接字。
参数socket，为需要赋予地址的套接字。
参数address，为赋予到套接字的地址结构，有ip和端口号标识。
参数address_len, 为该地址结构大小</p>

<p>对于服务端来讲，在调用监听函数之前，都需要bind到特定地址和端口</p>

<!-- more -->


<p>3、listen函数</p>

<pre><code>int listen(int socket, int backlog);
</code></pre>

<p>listen函数仅由TCP服务器调用，它做两件事情：<br/>
(1) 当socket函数创建一个套接字时，它被假设为一个主动套接字，也就是说，它是一个将调用connect发起连接的客户套接字。   listen函数把一个未连接的套接字转换成一个被动套接字，指示内核应接受指向该套接字的连接请求。根据tcp状态转换图，调用listen导致套接字从CLOSED状态转换到LISTEN状态。<br/>
(2) 本函数的第二个参数规定了内核应该为相应套接字排队的最大连接个数。
本函数通常应该在调用socket和bind这两个函数之后，并在调用accept函数之前调用。
内核为任何一个给定的监听套接字维护两个队列：<br/>
(1)未完成连接队列，每个这样的SYN分节对应其中一项：已由某个客户发出并到达服务器，而服务器正在等待完成相应的TCP三路握手过程。这些套接字处于SYN_RCVD状态<br/>
(2)已完成连接队列，每个已完成TCP三路握手的客户对应其中一项。这些套接字处于ESTABLISHED状态。
参数backlog规定了以上两个队列的总和大小</p>

<p>4、accept函数</p>

<pre><code>int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);
</code></pre>

<p>accept函数由TCP服务器调用，用于从已完成连接队列对头返回下一个已完成连接。如果已完成连接队列未空，那么进程被投入睡眠（假定套接字为默认的阻塞方式）。
参数address和address_len返回已连接的对端进程的协议地址。
如果accept成功，那么其返回值是由内核自动生产的一个全新描述符，代表与所返回客户的TCP连接。</p>

<p>5、下面是服务端源代码
此服务端小程序主要完成功能：1、监听服务端口，接收连接 2、接收客户端数据并处理后发回服务端</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;string.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;ctype.h&gt;

#define SERVER_PORT 8000

int main()
{
    // create socket
    int sock_server = socket(AF_INET, SOCK_STREAM, 0);
    if (-1 == sock_server) {
        printf("create socket fail.reason:%s\n",                strerror(errno));
        return -1;
    }

    // bind socket to local addr and port
    struct sockaddr_in servaddr;
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr  = INADDR_ANY;
    servaddr.sin_port = htons(SERVER_PORT);
    if (-1 == bind(sock_server, (struct sockaddr *)&amp;servaddr, (socklen_t)sizeof(servaddr))) {
        printf("bind to local addr fail.%s \n", strerror(errno));
        return -1;
    }
    printf("bind to local addr success\n");

    // make socket to listen
    if (-1 == listen(sock_server, 128)) {
        printf("listen fail.%s\n", strerror(errno));
        return -1;
    }

    struct sockaddr_in clientaddr;
    socklen_t clientaddr_len = sizeof(clientaddr);
    int connsock;

    // accept a new client connection
    while ((connsock = accept(sock_server, (struct sockaddr *)&amp;clientaddr, &amp;clientaddr_len)) != -1) {

        printf("new client connected, %s:%d \n", inet_ntoa(clientaddr.sin_addr),            clientaddr.sin_port);

        // recv data from client
        char buf[1024];
        ssize_t rcv_len;
        while ((rcv_len = recv(connsock, buf, sizeof(buf), 0)) &gt; 0) {
            printf("recv from client:%s\n", buf);
            for (int i = 0; i &lt; rcv_len; i++)
                buf[i] = toupper(buf[i]);
            send(connsock, buf, rcv_len, 0);
            printf("send to  client:%s\n", buf);
        }
        printf("len:%ld \n", rcv_len);
        close(connsock);
    }
    close(sock_server);
}   
</code></pre>

<p>运行效果：
<img src="http://jintao-zero.github.io/images/server.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcp 客户端示例]]></title>
    <link href="http://jintao-zero.github.io/blog/2015/02/10/tcp-ke-hu-duan-shi-li/"/>
    <updated>2015-02-10T19:07:27+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2015/02/10/tcp-ke-hu-duan-shi-li</id>
    <content type="html"><![CDATA[<p>实现了一个简单客户端，使用tcp与服务端进行通讯。本片文章主要介绍在tcp客户端网络编程中用到的几个基本函数：<br/>
1、创建socket</p>

<pre><code>int socket(int domain, int type, int protocol)
</code></pre>

<p>socket函数创建一个通讯端并返回这个终端的文件描述符。</p>

<p>参数domain指定发生整个通讯过程所在的协议域。协议域定义在&lt;sys/socket.h>头文件中，常用协议域名为：</p>

<pre><code>PF_LOCAL 主机内部通讯协议，之前名为PF_UNIX
PF_UNIX  主机内部通讯协议，废弃，使用PF_LOCAL
PF_INET  IPV4通讯协议
PF_INET6 IPV6通讯协议
。。。
</code></pre>

<p>本例子中使用PF_INET ipv4通讯协议域</p>

<p>参数type指定socket类型，目前定义类型为：</p>

<pre><code>SOCK_STREAM                                      
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
</code></pre>

<p>SOCK_STREAM 类型提供序列化、可靠的、全双工字节流套接字
SOCK_DGRAM 类型提供无连接的、不可靠的，有报文最大限制的数据报通讯套接字
SOCK_RAW 类型提供读取内部网络协议和网卡接口的原始套接字，需要有超级用户权限<br/>
本例子中使用SOCK_STREAM流套接字类型</p>

<p>失败时，函数返回－1，成功时，返回套接字文件描述符</p>

<p>2、connect连接服务端</p>

<pre><code>int connect(int socket, const struct sockaddr *address, socklen_t address_len);
</code></pre>

<p>connect函数在一个socket上面初始化一个连接</p>

<p>参数socket为要建立连接的套接字<br/>
参数address为要对端连接的地址，不同协议域会有不同的方式解析这个参数内容
参数address_len为传入的address地址所对应地址结构体占据的内存大小</p>

<p>连接成功，函数返回0，失败，则返回－1，同时置错误码errno</p>

<!-- more -->


<p></p>

<p>3、send发送内容</p>

<pre><code>ssize_t send(int socket, const void *buffer, size_t length, int flags);
</code></pre>

<p>send函数发送数据到对端套接字。使用send函数时需要socket处于连接状态。</p>

<p>参数buffer为需要发送内容首地址<br/>
参数length为需要发送的报文内容长度<br/>
参数flags可能包含以下两种：</p>

<pre><code>    #define MSG_OOB        0x1  /* process out-of-band data */
    #define MSG_DONTROUTE  0x4  /* bypass routing, use direct interface */
</code></pre>

<p>本例中，不需要以上两种标志，设置为0即可</p>

<p>发送成功，函数返回发送的字节数，发送失败，返回－1，设置errno错误码</p>

<p>4、recv接受内容</p>

<pre><code>ssize_t recv(int socket, void *buffer, size_t length, int flags);
</code></pre>

<p>recv函数只可以在处于连接状态套接字使用。
默认情况下，如果没有数据可读，recv调用将会一直阻塞等待数据到达，除非socket被设置为非阻塞状态。通常情况下，recv会返回任何可读数据，最大达到请求的length数量，而不是一直等待接收到length数量才返回，可以通过设置套接字属性SO_RCVLOWAT和SO_RCVTIMEO来进行修改。
如果没有可接收数据并且对端已经执行关闭操作，那么recv返回0</p>

<p>参数flags，有以下几种类型：</p>

<pre><code>MSG_OOB        process out-of-band data
MSG_PEEK       peek at incoming message
MSG_WAITALL    wait for full request or error
</code></pre>

<p>MSG_OOB标志请求接收带外数据。<br/>
MSG_PEEK标志使recv只从头读取队列中的数据而不从队列中删除这些数据，这样接下来的读操作会读取相同内容。
MSG_WAITALL标志使recv操作阻塞直到读取的报文达到请求字节数。</p>

<p>recv函数返回接收到的字节数，返回－1表示发生错误，返回0表示对端已经关闭连接。</p>

<p>5、示例代码
示例完成功能：1、与服务端建立tcp连接 2、从控制台读取输入，发送到服务端 3、读取服务端返回数据 4、关闭tcp连接</p>

<pre><code>#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

#define SERVER_PORT 8000

int main(int argc, char *argv[])
{
    // judge the legal arguments
    if (2 &gt; argc) {
        printf("please input a hostname \n");
        return -1;
    }

    // create a SOC_STREAM socket
    int sock_client = socket(AF_INET, SOCK_STREAM, 0);
    if (0 &gt; sock_client) {
        perror("create socket error");
        return -1;
    }


    // construct server sockaddr
    struct hostent *p = gethostbyname(argv[1]);
    if (p == NULL) {
        printf("gethostbyname:%s fail.reason:%s \n", argv[1], strerror(errno));
        return -1;
    }
    struct sockaddr_in servaddr;
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr = *(struct in_addr *)p-&gt;h_addr;
    servaddr.sin_port = htons(SERVER_PORT);

    // connect to server
    if (connect(sock_client, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) == -1) {
        printf("connect to server:%s port:%d fail.reason:%s \n", inet_ntoa(servaddr.sin_addr), SERVER_PORT,
        strerror(errno));
        return -1;
    }
    printf("connect to server:%s port:%d success\n", inet_ntoa(servaddr.sin_addr), SERVER_PORT );

    // send and rev data with server
    char buf[1024];
    while(fgets(buf, sizeof(buf)-1, stdin))
    {
        int len = strlen(buf);
        if (len == 1)
            break;
        buf[len-1] = '\0';
        printf("%d\n", len-1);
        ssize_t send_size = send(sock_client, buf, len, 0);
        if (send_size != len) {
            printf("send fail \n");
            break;
        }
        ssize_t rcv_size = recv(sock_client, buf, sizeof(buf), 0);
        if (rcv_size == -1) {
            printf("rcv fail\n");
            break;
        }
        printf("recv from server:%s \n", buf);
    }
    close(sock_client);
}   
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 6.5 安装ip Netns]]></title>
    <link href="http://jintao-zero.github.io/blog/2014/12/11/centos-6-dot-5-an-zhuang-ip-netns/"/>
    <updated>2014-12-11T16:42:57+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2014/12/11/centos-6-dot-5-an-zhuang-ip-netns</id>
    <content type="html"><![CDATA[<p>项目需要用到网络空间这一个技术，但是在CentOS 6.x版本中，ip命令并不能够使用netns这个参数：</p>

<pre><code>[root@gaichao ~]# ip netns
Object "netns" is unknown, try "ip help".
[root@gaichao ~]#
</code></pre>

<p>下面分别介绍以下安装失败与成功的经验：</p>

<!-- more -->


<p></p>

<h2>安装ip netns失败</h2>

<p>根据google指引，找到了这个方法<a href="https://github.com/amotoki/openvnet-test-tools/blob/master/README.md">OpenVNet test tools</a> ,也许是由于时间的推移，有的依赖做了改变，导致我在用文中方法安装netns时没有成功，下面把错误信息做一下记录：</p>

<p>CentOS 6.5内核本身是支持网络空间的，只不过系统自带的iproute不支持网络空间(没有netns子命令)</p>

<p>根据指导，需要运行以下命令安装一个支持网络空间的新版本iproute：</p>

<pre><code># yum install http://rdo.fedorapeople.org/rdo-release.rpm
# yum install iproute
</code></pre>

<p>运行第一个命令安装OpenStack RDO发布仓库到/etc/yum.repos.d目录，这个目录里面是yum命令安装、更新软件时需要用到的信息，第一步可以执行成功。</p>

<p>运行第二个命令升级iproute，报下面的错误：</p>

<pre><code>[root@gaichao ~]# yum install iproute
Loaded plugins: fastestmirror, refresh-packagekit, security
Loading mirror speeds from cached hostfile
* base: mirrors.pubyun.com
* epel: mirror01.idc.hinet.net
* extras: mirrors.btte.net
* updates: mirrors.btte.net
http://repos.fedorapeople.org/repos/openstack/  openstack-juno/epel-6/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - "The requested URL  returned error: 404 Not Found"
Trying other mirror.
Error: Cannot retrieve repository metadata (repomd.xml) for repository: openstack-juno.     Please verify its path and try again
[root@gaichao ~]#  
</code></pre>

<p>根据错误提示，发现报错的文件不存在，路径已经更新为<a href="https://repos.fedorapeople.org/repos/openstack/openstack-juno/epel-7/repodata/">https://repos.fedorapeople.org/repos/openstack/openstack-juno/epel-7/repodata/</a> 所以尝试修改/etc/yum.repos.d/rdo-release.repo文件，将baseurl修改为当前可以找到repomd.xml文件的路径：</p>

<pre><code>[openstack-juno]
name=OpenStack Juno Repository
baseurl=http://repos.fedorapeople.org/repos/openstack/openstack-juno/epel-7/
enabled=1
skip_if_unavailable=0
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RDO-Juno
</code></pre>

<p>运行安装命令成功</p>

<pre><code>[root@gaichao ~]# yum install iproute
</code></pre>

<p>但是查看iproute安装包，并没有按照设想安装带netns功能的iproute版本</p>

<pre><code>[root@gaichao ~]# rpm -qa | grep iproute
iproute-2.6.32-33.el6_6.x86_64
[root@gaichao ~]#
</code></pre>

<p>实际应该安装到这个版本iproute-2.6.32-130.el6ost.netns.2.x86_64<br/>
后来又尝试把iproute-2.6.32-130.el6ost.netns.2.x86_64 rpm包下载到本地进行安装，但是也没有成功</p>

<h2>安装ip netns 成功</h2>

<p>继续网络中搜索，发现<a href="http://digoal126.wap.blog.163.com/w2/blogDetail.do;jsessionid=C9F7702BA05F4C979FFF72779D38F7D9.blog84-8010?blogId=fks_087070086086089066083081080068072087087064092081081067080086&amp;showRest=true&amp;p=5&amp;hostID=digoal@126">德哥@Digoal的博客</a>的方法是可行的<br/>
根据文中的提示juno下已经没有epel6目录了，所以可以选择havana，路径如下：<a href="https://repos.fedorapeople.org/repos/openstack/openstack-havana/epel-6/">https://repos.fedorapeople.org/repos/openstack/openstack-havana/epel-6/</a> 需要修改/etc/yum.repos.d/rdo-release.repo中的baseurl:</p>

<pre><code>[openstack-juno]
name=OpenStack Juno Repository
baseurl=http://repos.fedorapeople.org/repos/openstack/openstack-havana/epel-6/
enabled=1
skip_if_unavailable=0
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-RDO-Juno
</code></pre>

<p>因为系统已经按照了iproute包，所以可以执行升级命令，进行升级：</p>

<pre><code>yum upgrade iproute 
</code></pre>

<p>执行成功后，运行以下命令查看iproute是否已经升级成为带netns命令</p>

<pre><code># rpm -qa | grep iproute
iproute-2.6.32-130.el6ost.netns.2.x86_64
# ip netns
# ip netns add test
# ip netns
test
# ip netns delete test
</code></pre>

<p>笔者安装成功，主要参考上面两个链接的内容，感谢</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Markdown语法]]></title>
    <link href="http://jintao-zero.github.io/blog/2014/11/03/xue-xi-markdownyu-fa/"/>
    <updated>2014-11-03T20:23:52+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2014/11/03/xue-xi-markdownyu-fa</id>
    <content type="html"><![CDATA[<p>学习Markdown基本语法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://jintao-zero.github.io/blog/2014/10/17/hello-world/"/>
    <updated>2014-10-17T16:46:20+08:00</updated>
    <id>http://jintao-zero.github.io/blog/2014/10/17/hello-world</id>
    <content type="html"><![CDATA[<p>属于自己的个人博客终于搭建起来 ：）。
利用这个博客，我首先是做一些自己学习、工作中的笔记，然后也希望能够写一些有价值的思考帮助到别人。</p>

<p>搭建博客感谢以下开源项目：</p>

<h2>Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a>是一款基于<a href="https://github.com/jekyll/jekyll">Jekyll</a>的静态站点生成系统，它很大程度上简化了用Jekyll搭建博客的过程。</p>

<h2>Github</h2>

<p><a href="https://pages.github.com/">Github</a>是一个面向全球开发者提供的免费、开源的代码托管项目。Github用户可以上传静态页面为自己建立个人主页或者项目主页，利用Githbub提供的免费主机以及子域名，我们可以将Octopress生成的静态页面上传到Github上建立个人博客。：）</p>

<h2>Markdown</h2>

<p><a href="http://zh.wikipedia.org/wiki/Markdown">Markdown</a>是一种轻量级标记语言，创始人约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br/>
Octopress可以将用Markdown编写的文本转化为html静态页面，两者配合可以快捷的撰写博客</p>

<h2>参考博客</h2>

<p>在搭建过程中，参考了以下博客，在此表示感谢：<br/>
<a href="http://812lcl.com/">812lcl的博客</a><br/>
<a href="http://codemacro.com/">loop in codes</a><br/>
<a href="http://yang3wei.github.io/">yang3wei的专栏</a></p>

<p>Thanks to Opene Source! this is my blog, welcome everybody.</p>
]]></content>
  </entry>
  
</feed>
